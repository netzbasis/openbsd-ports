$OpenBSD: patch-Modules_FindRuby_cmake,v 1.9 2014/01/15 19:54:37 dcoppa Exp $
Add support for rubyarchhdrdir and rubyarchlibdir, with fallback to "defaults"
on systems that have such directories but RbConfig doesn't have such options.
--- Modules/FindRuby.cmake.orig	Tue Nov  5 20:07:22 2013
+++ Modules/FindRuby.cmake	Tue Jan 14 09:25:56 2014
@@ -1,6 +1,6 @@
 # - Find Ruby
 # This module finds if Ruby is installed and determines where the include files
-# and libraries are. Ruby 1.8 and 1.9 are supported.
+# and libraries are. Ruby 1.8, 1.9, 2.0 and 2.1 are supported.
 #
 # The minimum required version of Ruby can be specified using the
 # standard syntax, e.g. find_package(Ruby 1.8)
@@ -41,9 +41,9 @@
 
 # Determine the list of possible names of the ruby executable depending
 # on which version of ruby is required
-set(_RUBY_POSSIBLE_EXECUTABLE_NAMES ruby)
+set(_RUBY_POSSIBLE_EXECUTABLE_NAMES)
 
-# if 1.9 is required, don't look for ruby18 and ruby1.8, default to version 1.8
+# Check if exact version is required, default to version 1.8
 if(Ruby_FIND_VERSION_MAJOR  AND  Ruby_FIND_VERSION_MINOR)
    set(Ruby_FIND_VERSION_SHORT_NODOT "${Ruby_FIND_VERSION_MAJOR}${RUBY_FIND_VERSION_MINOR}")
    # we can't construct that if only major version is given
@@ -56,16 +56,17 @@ else()
 endif()
 
 if(NOT Ruby_FIND_VERSION_EXACT)
-  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby1.9 ruby19)
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby2.1 ruby21 ruby2.0 ruby20 ruby1.9 ruby19)
 
   # if we want a version below 1.9, also look for ruby 1.8
   if("${Ruby_FIND_VERSION_SHORT_NODOT}" VERSION_LESS "19")
     list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby1.8 ruby18)
   endif()
-
-  list(REMOVE_DUPLICATES _RUBY_POSSIBLE_EXECUTABLE_NAMES)
 endif()
 
+list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby)
+list(REMOVE_DUPLICATES _RUBY_POSSIBLE_EXECUTABLE_NAMES)
+
 find_program(RUBY_EXECUTABLE NAMES ${_RUBY_POSSIBLE_EXECUTABLE_NAMES})
 
 
@@ -101,6 +102,16 @@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
    _RUBY_CONFIG_VAR("sitearchdir" RUBY_SITEARCH_DIR)
    _RUBY_CONFIG_VAR("sitelibdir" RUBY_SITELIB_DIR)
 
+   # not implemented in <2.0 but sometimes used
+   _RUBY_CONFIG_VAR("rubyarchhdrdir" RUBY_ARCHHDR_DIR)
+   if(NOT RUBY_ARCHHDR_DIR)
+      set(RUBY_ARCHHDR_DIR ${RUBY_HDR_DIR}/${RUBY_ARCH})
+   endif(NOT RUBY_ARCHHDR_DIR)
+   _RUBY_CONFIG_VAR("rubyarchlibdir" RUBY_ARCHLIB_DIR)
+   if(NOT RUBY_ARCHLIB_DIR)
+      set(RUBY_ARCHLIB_DIR ${RUBY_LIB_DIR}/${RUBY_ARCH})
+   endif(NOT RUBY_ARCHLIB_DIR)
+
    # vendor_ruby available ?
    execute_process(COMMAND ${RUBY_EXECUTABLE} -r vendor-specific -e "print 'true'"
       OUTPUT_VARIABLE RUBY_HAS_VENDOR_RUBY  ERROR_QUIET)
@@ -115,12 +126,14 @@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
    set(RUBY_VERSION_MINOR    ${RUBY_VERSION_MINOR}    CACHE PATH "The Ruby minor version" FORCE)
    set(RUBY_VERSION_PATCH    ${RUBY_VERSION_PATCH}    CACHE PATH "The Ruby patch version" FORCE)
    set(RUBY_ARCH_DIR         ${RUBY_ARCH_DIR}         CACHE PATH "The Ruby arch dir" FORCE)
-   set(RUBY_HDR_DIR          ${RUBY_HDR_DIR}          CACHE PATH "The Ruby header dir (1.9)" FORCE)
+   set(RUBY_HDR_DIR          ${RUBY_HDR_DIR}          CACHE PATH "The Ruby header dir (1.9+)" FORCE)
    set(RUBY_POSSIBLE_LIB_DIR ${RUBY_POSSIBLE_LIB_DIR} CACHE PATH "The Ruby lib dir" FORCE)
    set(RUBY_RUBY_LIB_DIR     ${RUBY_RUBY_LIB_DIR}     CACHE PATH "The Ruby ruby-lib dir" FORCE)
    set(RUBY_SITEARCH_DIR     ${RUBY_SITEARCH_DIR}     CACHE PATH "The Ruby site arch dir" FORCE)
    set(RUBY_SITELIB_DIR      ${RUBY_SITELIB_DIR}      CACHE PATH "The Ruby site lib dir" FORCE)
    set(RUBY_HAS_VENDOR_RUBY  ${RUBY_HAS_VENDOR_RUBY}  CACHE BOOL "Vendor Ruby is available" FORCE)
+   set(RUBY_ARCHHDR_DIR      ${RUBY_ARCHHDR_DIR}      CACHE PATH "The Ruby arch-specific header dir (1.9+)" FORCE)
+   set(RUBY_ARCHLIB_DIR      ${RUBY_ARCHLIBDIR}       CACHE PATH "The Ruby arch-specific lib dir (1.9+)" FORCE)
    set(RUBY_VENDORARCH_DIR   ${RUBY_VENDORARCH_DIR}   CACHE PATH "The Ruby vendor arch dir" FORCE)
    set(RUBY_VENDORLIB_DIR    ${RUBY_VENDORLIB_DIR}    CACHE PATH "The Ruby vendor lib dir" FORCE)
 
@@ -133,6 +146,8 @@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
      RUBY_SITEARCH_DIR
      RUBY_SITELIB_DIR
      RUBY_HAS_VENDOR_RUBY
+     RUBY_ARCHHDR_DIR
+     RUBY_ARCHLIB_DIR
      RUBY_VENDORARCH_DIR
      RUBY_VENDORLIB_DIR
      RUBY_VERSION_MAJOR
@@ -148,8 +163,14 @@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
    set(RUBY_VERSION_MAJOR 1)
    set(RUBY_VERSION_MINOR 8)
    set(RUBY_VERSION_PATCH 0)
-   # check whether we found 1.9.x
-   if(${RUBY_EXECUTABLE} MATCHES "ruby1.?9"  OR  RUBY_HDR_DIR)
+   # check whether we found 2.1.x, 2.0.x, or 1.9.x
+   if(${RUBY_EXECUTABLE} MATCHES "ruby2\\.?1")
+      set(RUBY_VERSION_MAJOR 2)
+      set(RUBY_VERSION_MINOR 1)
+   elseif(${RUBY_EXECUTABLE} MATCHES "ruby2\\.?0")
+      set(RUBY_VERSION_MAJOR 2)
+      set(RUBY_VERSION_MINOR 0)
+   elseif(${RUBY_EXECUTABLE} MATCHES "ruby1\\.?9")
       set(RUBY_VERSION_MAJOR 1)
       set(RUBY_VERSION_MINOR 9)
    endif()
@@ -166,6 +187,7 @@ find_path(RUBY_INCLUDE_DIR
    NAMES ruby.h
    HINTS
    ${RUBY_HDR_DIR}
+   ${RUBY_ARCHHDR_DIR}
    ${RUBY_ARCH_DIR}
    /usr/lib/ruby/${_RUBY_VERSION_SHORT}/i586-linux-gnu/ )
 
@@ -176,6 +198,7 @@ if( "${Ruby_FIND_VERSION_SHORT_NODOT}" GREATER 18  OR 
    find_path(RUBY_CONFIG_INCLUDE_DIR
      NAMES ruby/config.h  config.h
      HINTS
+     ${RUBY_ARCHHDR_DIR}
      ${RUBY_HDR_DIR}/${RUBY_ARCH}
      ${RUBY_ARCH_DIR}
      )
@@ -185,7 +208,14 @@ endif()
 
 
 # Determine the list of possible names for the ruby library
-set(_RUBY_POSSIBLE_LIB_NAMES ruby ruby-static ruby${_RUBY_VERSION_SHORT} ruby${_RUBY_VERSION_SHORT_NODOT} ruby-${_RUBY_VERSION_SHORT} ruby-${RUBY_VERSION})
+set(_RUBY_POSSIBLE_LIB_NAMES
+  ruby-${RUBY_VERSION}
+  ruby-${_RUBY_VERSION_SHORT}
+  ruby${_RUBY_VERSION_SHORT}
+  ruby${_RUBY_VERSION_SHORT_NODOT}
+  ruby
+  ruby-static
+  )
 
 if(WIN32)
    set( _RUBY_MSVC_RUNTIME "" )
