$OpenBSD: patch-tools_lld_ELF_InputSection_cpp,v 1.1 2016/10/09 06:47:10 ajacoutot Exp $

Include filenames and section names to error messages.

--- tools/lld/ELF/InputSection.cpp.orig	Sat Oct  8 18:30:27 2016
+++ tools/lld/ELF/InputSection.cpp	Sat Oct  8 19:07:24 2016
@@ -59,6 +59,11 @@ template <class ELFT> StringRef InputSectionBase<ELFT>
   return check(File->getObj().getSectionName(this->Header));
 }
 
+// Returns a string for an error message.
+template <class SectionT> static std::string getName(SectionT *Sec) {
+  return (Sec->getFile()->getName() + "(" + Sec->getSectionName() + ")").str();
+}
+
 template <class ELFT>
 ArrayRef<uint8_t> InputSectionBase<ELFT>::getSectionData() const {
   if (Compressed)
@@ -83,8 +88,8 @@ typename ELFT::uint InputSectionBase<ELFT>::getOffset(
     // input files contain section symbol points to the corresponding input
     // section. Redirect it to the produced output section.
     if (Offset != 0)
-      fatal("Unsupported reference to the middle of '" + getSectionName() +
-            "' section");
+      fatal(getName(this) + ": unsupported reference to the middle of '" +
+            getSectionName() + "' section");
     return this->OutSec->getVA();
   }
   llvm_unreachable("invalid section kind");
@@ -92,7 +97,8 @@ typename ELFT::uint InputSectionBase<ELFT>::getOffset(
 
 template <class ELFT> void InputSectionBase<ELFT>::uncompress() {
   if (!zlib::isAvailable())
-    fatal("build lld with zlib to enable compressed sections support");
+    fatal(getName(this) +
+          ": build lld with zlib to enable compressed sections support");
 
   // A compressed section consists of a header of Elf_Chdr type
   // followed by compressed data.
@@ -105,11 +111,11 @@ template <class ELFT> void InputSectionBase<ELFT>::unc
   Data = Data.slice(sizeof(Elf_Chdr));
 
   if (Hdr->ch_type != ELFCOMPRESS_ZLIB)
-    fatal("unsupported compression type");
+    fatal(getName(this) + ": unsupported compression type");
 
   StringRef Buf((const char *)Data.data(), Data.size());
   if (zlib::uncompress(Buf, Uncompressed, Hdr->ch_size) != zlib::StatusOK)
-    fatal("error uncompressing section");
+    fatal(getName(this) + ": error uncompressing section");
 }
 
 template <class ELFT>
@@ -314,7 +320,7 @@ void InputSection<ELFT>::relocateNonAlloc(uint8_t *Buf
 
     SymbolBody &Sym = this->File->getRelocTargetSym(Rel);
     if (Target->getRelExpr(Type, Sym) != R_ABS) {
-      error(this->getSectionName() + " has non-ABS reloc");
+      error(getName(this) + " has non-ABS reloc");
       return;
     }
 
@@ -497,14 +503,15 @@ static size_t findNull(ArrayRef<uint8_t> A, size_t Ent
 
 // Split SHF_STRINGS section. Such section is a sequence of
 // null-terminated strings.
-static std::vector<SectionPiece> splitStrings(ArrayRef<uint8_t> Data,
-                                              size_t EntSize) {
+template <class ELFT>
+std::vector<SectionPiece>
+MergeInputSection<ELFT>::splitStrings(ArrayRef<uint8_t> Data, size_t EntSize) {
   std::vector<SectionPiece> V;
   size_t Off = 0;
   while (!Data.empty()) {
     size_t End = findNull(Data, EntSize);
     if (End == StringRef::npos)
-      fatal("string is not null terminated");
+      fatal(getName(this) + ": string is not null terminated");
     size_t Size = End + EntSize;
     V.emplace_back(Off, Data.slice(0, Size));
     Data = Data.slice(Size);
@@ -515,8 +522,10 @@ static std::vector<SectionPiece> splitStrings(ArrayRef
 
 // Split non-SHF_STRINGS section. Such section is a sequence of
 // fixed size records.
-static std::vector<SectionPiece> splitNonStrings(ArrayRef<uint8_t> Data,
-                                                 size_t EntSize) {
+template <class ELFT>
+std::vector<SectionPiece>
+MergeInputSection<ELFT>::splitNonStrings(ArrayRef<uint8_t> Data,
+                                         size_t EntSize) {
   std::vector<SectionPiece> V;
   size_t Size = Data.size();
   assert((Size % EntSize) == 0);
@@ -562,7 +571,7 @@ SplitInputSection<ELFT>::getSectionPiece(uintX_t Offse
   StringRef Data((const char *)D.data(), D.size());
   uintX_t Size = Data.size();
   if (Offset >= Size)
-    fatal("entry is past the end of the section");
+    fatal(getName(this) + ": entry is past the end of the section");
 
   // Find the element this offset points to.
   auto I = std::upper_bound(
@@ -614,7 +623,7 @@ MipsReginfoInputSection<ELFT>::MipsReginfoInputSection
   // Initialize this->Reginfo.
   ArrayRef<uint8_t> D = this->getSectionData();
   if (D.size() != sizeof(Elf_Mips_RegInfo<ELFT>)) {
-    error("invalid size of .reginfo section");
+    error(getName(this) + ": invalid size of .reginfo section");
     return;
   }
   Reginfo = reinterpret_cast<const Elf_Mips_RegInfo<ELFT> *>(D.data());
@@ -633,7 +642,7 @@ MipsOptionsInputSection<ELFT>::MipsOptionsInputSection
   ArrayRef<uint8_t> D = this->getSectionData();
   while (!D.empty()) {
     if (D.size() < sizeof(Elf_Mips_Options<ELFT>)) {
-      error("invalid size of .MIPS.options section");
+      error(getName(this) + ": invalid size of .MIPS.options section");
       break;
     }
     auto *O = reinterpret_cast<const Elf_Mips_Options<ELFT> *>(D.data());
