$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.34 2016/09/24 12:35:38 ajacoutot Exp $

- Select proper SPARCv9 variant for the external assembler
- For now, force soft-float on ARM
- Set ABI for ARM
- Produce EH frame header for all binaries
- Link static PIEs with the correct C runtime (rcrt0.o)

--- tools/clang/lib/Driver/Tools.cpp.orig	Fri Feb 12 17:51:41 2016
+++ tools/clang/lib/Driver/Tools.cpp	Mon Sep 19 20:58:33 2016
@@ -78,7 +78,7 @@ static const char *getSparcAsmModeForCPU(StringRef Nam
           .Case("niagara2", "-Av9b")
           .Case("niagara3", "-Av9d")
           .Case("niagara4", "-Av9d")
-          .Default("-Av9");
+          .Default("-Av9a");
   } else {
     return llvm::StringSwitch<const char *>(Name)
           .Case("v8", "-Av8")
@@ -721,6 +721,10 @@ arm::FloatABI arm::getARMFloatABI(const ToolChain &TC,
       }
       break;
 
+    case llvm::Triple::OpenBSD:
+      ABI = FloatABI::Soft;
+      break;
+
     default:
       switch (Triple.getEnvironment()) {
       case llvm::Triple::GNUEABIHF:
@@ -977,6 +981,8 @@ void Clang::AddARMTargetArgs(const llvm::Triple &Tripl
     default:
       if (Triple.getOS() == llvm::Triple::NetBSD)
         ABIName = "apcs-gnu";
+      else if (Triple.getOS() == llvm::Triple::OpenBSD)
+        ABIName = "aapcs-linux";
       else
         ABIName = "aapcs";
       break;
@@ -7570,12 +7576,13 @@ void openbsd::Linker::ConstructJob(Compilation &C, con
     CmdArgs.push_back("__start");
   }
 
+  CmdArgs.push_back("--eh-frame-hdr");
+
   if (Args.hasArg(options::OPT_static)) {
     CmdArgs.push_back("-Bstatic");
   } else {
     if (Args.hasArg(options::OPT_rdynamic))
       CmdArgs.push_back("-export-dynamic");
-    CmdArgs.push_back("--eh-frame-hdr");
     CmdArgs.push_back("-Bdynamic");
     if (Args.hasArg(options::OPT_shared)) {
       CmdArgs.push_back("-shared");
@@ -7600,6 +7607,10 @@ void openbsd::Linker::ConstructJob(Compilation &C, con
       if (Args.hasArg(options::OPT_pg))
         CmdArgs.push_back(
             Args.MakeArgString(getToolChain().GetFilePath("gcrt0.o")));
+      else if (Args.hasArg(options::OPT_static) &&
+               !Args.hasArg(options::OPT_nopie))
+        CmdArgs.push_back(
+            Args.MakeArgString(getToolChain().GetFilePath("rcrt0.o")));
       else
         CmdArgs.push_back(
             Args.MakeArgString(getToolChain().GetFilePath("crt0.o")));
@@ -7611,15 +7622,17 @@ void openbsd::Linker::ConstructJob(Compilation &C, con
     }
   }
 
-  std::string Triple = getToolChain().getTripleString();
-  if (Triple.substr(0, 6) == "x86_64")
-    Triple.replace(0, 6, "amd64");
-  CmdArgs.push_back(
-      Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple + "/4.2.1"));
-
   Args.AddAllArgs(CmdArgs, {options::OPT_L, options::OPT_T_Group,
                             options::OPT_e, options::OPT_s, options::OPT_t,
                             options::OPT_Z_Flag, options::OPT_r});
+
+  std::string Triple = getToolChain().getTripleString();
+  if (Triple.substr(0, 5) == "amd64")
+    Triple.replace(0, 5, "x86_64");
+  CmdArgs.push_back(
+      Args.MakeArgString("-L${LOCALBASE}/lib/gcc/" + Triple + "/${GCC_VER}"));
+  CmdArgs.push_back(
+      Args.MakeArgString("-L${LOCALBASE}/lib"));
 
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs);
 
