$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.6 2016/05/14 20:36:36 ajacoutot Exp $
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Tue Feb 16 14:56:48 2016
+++ tools/clang/lib/Driver/ToolChains.cpp	Fri Mar 25 21:50:14 2016
@@ -2986,6 +2986,50 @@ Tool *OpenBSD::buildAssembler() const {
 
 Tool *OpenBSD::buildLinker() const { return new tools::openbsd::Linker(*this); }
 
+ToolChain::CXXStdlibType OpenBSD::GetCXXStdlibType(const ArgList &Args) const {
+  if (Arg *A = Args.getLastArg(options::OPT_stdlib_EQ)) {
+    StringRef Value = A->getValue();
+    if (Value == "libstdc++")
+      return ToolChain::CST_Libstdcxx;
+    if (Value == "libc++")
+      return ToolChain::CST_Libcxx;
+
+    getDriver().Diag(diag::err_drv_invalid_stdlib_name) << A->getAsString(Args);
+  }
+  return ToolChain::CST_Libstdcxx;
+}
+
+void OpenBSD::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                          ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  /* XXX handle libc++ includes */
+
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}");
+
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}/${GCC_CONFIG}");
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}/backward");
+}
+
+void OpenBSD::AddCXXStdlibLibArgs(const ArgList &Args,
+                                 ArgStringList &CmdArgs) const {
+ switch (GetCXXStdlibType(Args)) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lc++abi");
+    CmdArgs.push_back("-lpthread");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lestdc++");
+    break;
+  }
+}
+
 /// Bitrig - Bitrig tool chain which can call as(1) and ld(1) directly.
 
 Bitrig::Bitrig(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
