$OpenBSD: patch-meson_build,v 1.9 2019/11/01 19:33:14 ajacoutot Exp $

XXX base gcc
Reordering needed to prefer long long because base-gcc doesn't recognize
  #pragma GCC diagnostic error "-Wincompatible-pointer-types"
and doesn't fail to compile the test case (gint64 should be long long).

gsize should be unsigned long: https://gitlab.gnome.org/GNOME/glib/issues/1777

From a76cb94308e98f948d19ebef7e0c5c0a58112be9 Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@gnome.org>
Date: Sun, 14 Jul 2019 19:25:28 +0200
Subject: [PATCH] fix atomic detection on older gcc versions

Index: meson.build
--- meson.build.orig
+++ meson.build
@@ -1169,18 +1169,6 @@ endif
 # works.
 if long_long_size == long_size
   if cc.compiles('''#if defined(_AIX) && !defined(__GNUC__)
-                    #pragma options langlvl=stdc99
-                    #endif
-                    #pragma GCC diagnostic error "-Wincompatible-pointer-types"
-                    #include <stdint.h>
-                    #include <stdio.h>
-                    int main () {
-                      int64_t i1 = 1;
-                      long *i2 = &i1;
-                      return 1;
-                    }''', name : 'int64_t is long')
-    int64_t_typedef = 'long'
-  elif cc.compiles('''#if defined(_AIX) && !defined(__GNUC__)
                       #pragma options langlvl=stdc99
                       #endif
                       #pragma GCC diagnostic error "-Wincompatible-pointer-types"
@@ -1192,6 +1180,18 @@ if long_long_size == long_size
                         return 1;
                       }''', name : 'int64_t is long long')
     int64_t_typedef = 'long long'
+  elif cc.compiles('''#if defined(_AIX) && !defined(__GNUC__)
+                    #pragma options langlvl=stdc99
+                    #endif
+                    #pragma GCC diagnostic error "-Wincompatible-pointer-types"
+                    #include <stdint.h>
+                    #include <stdio.h>
+                    int main () {
+                      int64_t i1 = 1;
+                      long *i2 = &i1;
+                      return 1;
+                    }''', name : 'int64_t is long')
+    int64_t_typedef = 'long'
   endif
 endif
 
@@ -1327,13 +1327,6 @@ if sizet_size == short_size
   glibconfig_conf.set_quoted('gsize_format', 'hu')
   glibconfig_conf.set_quoted('gssize_format', 'hi')
   glibconfig_conf.set('glib_msize_type', 'SHRT')
-elif sizet_size == int_size
-  glibconfig_conf.set('glib_size_type_define', 'int')
-  glibconfig_conf.set_quoted('gsize_modifier', '')
-  glibconfig_conf.set_quoted('gssize_modifier', '')
-  glibconfig_conf.set_quoted('gsize_format', 'u')
-  glibconfig_conf.set_quoted('gssize_format', 'i')
-  glibconfig_conf.set('glib_msize_type', 'INT')
 elif sizet_size == long_size
   glibconfig_conf.set('glib_size_type_define', 'long')
   glibconfig_conf.set_quoted('gsize_modifier', 'l')
@@ -1341,6 +1334,13 @@ elif sizet_size == long_size
   glibconfig_conf.set_quoted('gsize_format', 'lu')
   glibconfig_conf.set_quoted('gssize_format', 'li')
   glibconfig_conf.set('glib_msize_type', 'LONG')
+elif sizet_size == int_size
+  glibconfig_conf.set('glib_size_type_define', 'int')
+  glibconfig_conf.set_quoted('gsize_modifier', '')
+  glibconfig_conf.set_quoted('gssize_modifier', '')
+  glibconfig_conf.set_quoted('gsize_format', 'u')
+  glibconfig_conf.set_quoted('gssize_format', 'i')
+  glibconfig_conf.set('glib_msize_type', 'INT')
 elif sizet_size == long_long_size
   glibconfig_conf.set('glib_size_type_define', 'long long')
   glibconfig_conf.set_quoted('gsize_modifier', int64_m)
