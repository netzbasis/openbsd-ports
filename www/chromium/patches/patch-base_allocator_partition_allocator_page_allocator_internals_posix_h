$OpenBSD: patch-base_allocator_partition_allocator_page_allocator_internals_posix_h,v 1.1 2019/02/06 16:41:55 robert Exp $

Index: base/allocator/partition_allocator/page_allocator_internals_posix.h
--- base/allocator/partition_allocator/page_allocator_internals_posix.h.orig
+++ base/allocator/partition_allocator/page_allocator_internals_posix.h
@@ -14,7 +14,7 @@
 #if defined(OS_MACOSX)
 #include <mach/mach.h>
 #endif
-#if defined(OS_LINUX)
+#if defined(OS_BSD) || defined(OS_LINUX)
 #include <sys/resource.h>
 
 #include <algorithm>
@@ -48,8 +48,8 @@ int GetAccessFlags(PageAccessibilityConfiguration acce
   }
 }
 
-#if defined(OS_LINUX) && defined(ARCH_CPU_64_BITS)
-
+#if (defined(OS_BSD) || defined(OS_LINUX)) && defined(ARCH_CPU_64_BITS)
+#define RLIMIT_AS RLIMIT_DATA
 // Multiple guarded memory regions may exceed the process address space limit.
 // This function will raise or lower the limit by |amount|.
 bool AdjustAddressSpaceLimit(int64_t amount) {
@@ -134,7 +134,7 @@ void SetSystemPagesAccessInternal(
 void FreePagesInternal(void* address, size_t length) {
   CHECK(!munmap(address, length));
 
-#if defined(OS_LINUX) && defined(ARCH_CPU_64_BITS)
+#if (defined(OS_BSD) || defined(OS_LINUX)) && defined(ARCH_CPU_64_BITS)
   // Restore the address space limit.
   if (length >= kMinimumGuardedMemorySize) {
     CHECK(AdjustAddressSpaceLimit(-base::checked_cast<int64_t>(length)));
