$OpenBSD: patch-Source_WTF_wtf_CheckedArithmetic_h,v 1.1 2019/03/25 14:03:49 cwen Exp $

macppc linking fix: with ports-clang, libgcc is used instead of compiler-rt,
and it does not provide the __mulodi4 symbol used by clang for
__builtin_mul_overflow.

Other !base-clang archs should be added if they can
go up to the final linking parts.

see https://bugs.webkit.org/show_bug.cgi?id=190208

Index: Source/WTF/wtf/CheckedArithmetic.h
--- Source/WTF/wtf/CheckedArithmetic.h.orig
+++ Source/WTF/wtf/CheckedArithmetic.h
@@ -31,6 +31,10 @@
 #include <stdint.h>
 #include <type_traits>
 
+#if COMPILER(GCC_COMPATIBLE) && !(defined(__clang__) && defined(__powerpc__))
+#define USE_MUL_OVERFLOW 1
+#endif
+
 /* Checked<T>
  *
  * This class provides a mechanism to perform overflow-safe integer arithmetic
@@ -360,7 +364,7 @@ template <typename LHS, typename RHS, typename ResultT
 
     static inline bool multiply(LHS lhs, RHS rhs, ResultType& result) WARN_UNUSED_RETURN
     {
-#if COMPILER(GCC_COMPATIBLE)
+#if USE(MUL_OVERFLOW) 
         ResultType temp;
         if (__builtin_mul_overflow(lhs, rhs, &temp))
             return false;
@@ -433,7 +437,7 @@ template <typename LHS, typename RHS, typename ResultT
 
     static inline bool multiply(LHS lhs, RHS rhs, ResultType& result) WARN_UNUSED_RETURN
     {
-#if COMPILER(GCC_COMPATIBLE)
+#if USE(MUL_OVERFLOW)
         ResultType temp;
         if (__builtin_mul_overflow(lhs, rhs, &temp))
             return false;
@@ -496,7 +500,7 @@ template <typename ResultType> struct ArithmeticOperat
 
     static inline bool multiply(int64_t lhs, int64_t rhs, ResultType& result)
     {
-#if COMPILER(GCC_COMPATIBLE)
+#if USE(MUL_OVERFLOW)
         ResultType temp;
         if (__builtin_mul_overflow(lhs, rhs, &temp))
             return false;
