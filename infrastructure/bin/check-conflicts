#!/usr/bin/perl

# $OpenBSD: check-conflicts,v 1.11 2015/06/01 00:01:48 espie Exp $
# Copyright (c) 2000-2005
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# check all packages in the current directory, and report conflicts which
# are not apparent in @pkgcfl.

use strict;
use warnings;

my ($ports1);
use FindBin;
BEGIN {
	$ports1 = $ENV{PORTSDIR} || '/usr/ports';
}
use lib ("$ports1/infrastructure/lib", "$FindBin::Bin/../lib");

use File::Spec;
use File::Path;
use OpenBSD::PackingList;
use OpenBSD::AddCreateDelete;
use OpenBSD::PkgCfl;
use OpenBSD::PlistScanner;

package OpenBSD::PackingElement;
sub register
{
}

sub known_page
{
}

sub add_extra_manpage
{
}

package OpenBSD::PackingElement::FileBase;

my $pkg_list = {};
my $seen = {};

sub register 
{
	my ($self, $o, $pkgname) = @_;

	my $all_conflict = $o->{filehash};

	my $file = File::Spec->canonpath($self->fullname);
	# build one single list for each pkgnames combination
	if (exists $all_conflict->{$file}) {
		$pkg_list->{$all_conflict->{$file}}{$pkgname} ||=
		    [@{$all_conflict->{$file}}, $pkgname ];
		$all_conflict->{$file} = 
		    $pkg_list->{$all_conflict->{$file}}{$pkgname};
	} elsif (exists $seen->{$file}) {
		$pkg_list->{$seen->{$file}}{$pkgname} ||=
		    [ @{$seen->{$file}}, $pkgname ];
		$all_conflict->{$file} = 
		    $pkg_list->{$seen->{$file}}{$pkgname};
		delete $seen->{$file};
	} else {
		$pkg_list->{$pkgname} ||= [$pkgname];
		$seen->{$file} = $pkg_list->{$pkgname};
	}
}

package OpenBSD::PackingElement::Depend;
sub register 
{
	my ($self, $o, $pkgname) = @_;
	if (defined $self->{def}) {
		push @{$o->{all_deps}{$pkgname}}, $self->{def};
	}
}

package OpenBSD::PackingElement::Manpage;

sub is_dest
{
	my $self = shift;
	return $self->name =~ m/man\/cat[^\/]+\/[^\/]+\.0$/o;
}

sub dest_to_source
{
	my $self = shift;
	my $v = $self->name;
	$v =~ s/(man\/)cat([^\/]+)(\/[^\/]+)\.0$/$1man$2$3.$2/;
	return $v;
}

sub known_page
{
	my ($self, $h) = @_;
	$h->{File::Spec->canonpath($self->fullname)} = 1;
}

sub add_extra_manpage
{
	my ($self, $known, $plist) = @_;
	if ($self->is_source) {
		my $dest = $self->source_to_dest;
		my $fullname = $self->cwd."/".$dest;
		my $file = File::Spec->canonpath($fullname);
		if (!$known->{$file}) {
			OpenBSD::PackingElement::Manpage->add($plist, $dest);
			$known->{$file} = 1;
		}
	}
	if ($self->is_dest) {
		my $src = $self->dest_to_source;
		my $fullname = $self->cwd."/".$src;
		my $file = File::Spec->canonpath($fullname);
		if (!$known->{$file}) {
			OpenBSD::PackingElement::Manpage->add($plist, $src);
			$known->{$file} = 1;
		}
	}
}

package CheckConflictScanner;
our @ISA = (qw(OpenBSD::PlistScanner));

sub add_more_man
{
	my ($self, $plist) = @_;
	my $knownman = {};
	$plist->known_page($knownman);
	$plist->add_extra_manpage($knownman, $plist);
}

sub register_plist
{
	my ($self, $plist) = @_;
	$self->{conflicts}{$plist->pkgname} = 
	    OpenBSD::PkgCfl->make_conflict_list($plist);
	if ($self->ui->opt('e')) {
		$self->add_more_man($plist);
	}
	$plist->register($self, $plist->pkgname);
}

sub new
{
	my ($class) = @_;
	my $o = $class->SUPER::new('check-conflicts');
	$o->{filehash} = {};
	$o->{conflicts} = {};
	$o->{all_deps} = {};
	return $o;
}


my $cache3 = {};
my $cache4 = {}; 

sub direct_conflict
{
	my ($conflicts, $pkg, $pkg2) = @_;

	return $cache3->{$pkg}{$pkg2} //= $conflicts->{$pkg}->conflicts_with($pkg2);
}

sub has_a_conflict
{
	my ($conflicts, $deps, $pkg, $pkg2) = @_;
	return $cache4->{$pkg}{$pkg2} //= find_a_conflict($conflicts, $deps, $pkg, $pkg2);
}

sub find_a_conflict
{
	my ($conflicts, $deps, $pkg, $pkg2) = @_;
	return 0 if $pkg eq $pkg2;
	
	if (defined $conflicts->{$pkg} && 
	    direct_conflict($conflicts, $pkg, $pkg2)) {
		return 1;
	}
	if (defined $deps->{$pkg}) {
		for my $dep (@{$deps->{$pkg}}) {
		    if (has_a_conflict($conflicts, $deps, $dep, $pkg2)) {
			    return 1;
		    }
		}
	}
	if (defined $deps->{$pkg2}) {
		for my $dep (@{$deps->{$pkg2}}) {
			if (has_a_conflict($conflicts, $deps, $pkg, $dep)) {
				return 1;
			}
		}
	}
	return 0;
}

sub compute_true_conflicts
{
	my ($self, $l) = @_;
	my $conflicts = $self->{conflicts};
	my $deps = $self->{all_deps};
	# create a list of unconflicting packages.
	my $l2 = [];
	for my $pkg (@$l) {
		my $keepit = 0;
		for my $pkg2 (@$l) {
			next if $pkg eq $pkg2;
			if (!(has_a_conflict($conflicts, $deps, $pkg, $pkg2) ||
			    has_a_conflict($conflicts, $deps, $pkg2, $pkg))) {
				$keepit = 1;
				last;
			}
		}
		if ($keepit) {
		    push(@$l2, $pkg);
		}
	}
	return $l2;
}

sub compute_problems
{
	my ($self) = @_;

	my $c = {};
	my $c2 = {};
	my $r = {};
	my $cache = {};

	my $h = $self->{filehash};
	my $total = scalar(keys %$h);
	my $i =0;
	while (my ($key, $l) = each %$h) {
		$self->ui->progress->show(++$i, $total);
		if (!defined $c->{$l}) {
			my %s = map {($_, 1)} @$l;
			$c->{$l} = [sort keys %s];
			$c2->{$l} = join(',', @{$c->{$l}});
		}
		my $hv = $c2->{$l};
		$l = $c->{$l};
		next if @$l == 1;
		$cache->{$hv} //= $self->compute_true_conflicts($l);
		my $result = $cache->{$hv};
		if (@$result != 0) {
			my $newkey = join(',', 
			    map { $self->fullname($_) } @$result);
			if (@$result == 1) {
				$newkey.="-> was ".join(',', @$l);
			}
			push(@{$r->{$newkey}}, $key);
		}
	}
	return $r;
}

sub display_results
{
	my $self = shift;

	$self->ui->progress->set_header("File problems");
	my $result = $self->compute_problems;
	for my $cfl (sort keys %$result) {
		$self->ui->say("#1", $cfl);
		for my $f (sort @{$result->{$cfl}}) {
			$self->ui->say("\t#1", $f);
		}
	}
}

package main;


my $o = CheckConflictScanner->new;
$o->run;

