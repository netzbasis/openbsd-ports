$OpenBSD: patch-solid_solid_backends_shared_cpufeatures_cpp,v 1.1 2018/04/17 13:32:05 sthen Exp $

Index: solid/solid/backends/shared/cpufeatures.cpp
--- solid/solid/backends/shared/cpufeatures.cpp.orig
+++ solid/solid/backends/shared/cpufeatures.cpp
@@ -51,23 +51,23 @@ static void sighandler( int )
 #endif
 
 #ifdef __i386__
-  #define ASM_REG(reg)              "%e"reg
-  #define ASM_POP(reg)              "popl   %%e"reg"             \n\t"
-  #define ASM_PUSH(reg)             "pushl  %%e"reg"             \n\t"
-  #define ASM_XOR_REG(reg1, reg2)   "xorl   %%e"reg1", %%e"reg2" \n\t"
-  #define ASM_XOR_VAR(var, reg)     "xorl   "var",     %%e"reg"  \n\t"
-  #define ASM_CMP_REG(reg1, reg2)   "cmpl   %%e"reg1", %%e"reg2" \n\t"
-  #define ASM_MOV_REG(reg1, reg2)   "movl   %%e"reg1", %%e"reg2" \n\t"
-  #define ASM_MOV_VAR(var, reg)     "movl   "var",     %%e"reg"  \n\t"
+  #define ASM_REG(reg)              "%e" reg
+  #define ASM_POP(reg)              "popl   %%e" reg "             \n\t"
+  #define ASM_PUSH(reg)             "pushl  %%e" reg "             \n\t"
+  #define ASM_XOR_REG(reg1, reg2)   "xorl   %%e" reg1 ", %%e" reg2 " \n\t"
+  #define ASM_XOR_VAR(var, reg)     "xorl   " var ",     %%e" reg "  \n\t"
+  #define ASM_CMP_REG(reg1, reg2)   "cmpl   %%e" reg1 ", %%e" reg2 " \n\t"
+  #define ASM_MOV_REG(reg1, reg2)   "movl   %%e" reg1 ", %%e" reg2 " \n\t"
+  #define ASM_MOV_VAR(var, reg)     "movl   " var ",     %%e" reg "  \n\t"
 #elif defined(__x86_64__)
-  #define ASM_REG(reg)              "%r"reg
-  #define ASM_POP(reg)              "popq   %%r"reg"             \n\t"
-  #define ASM_PUSH(reg)             "pushq  %%r"reg"             \n\t"
-  #define ASM_XOR_REG(reg1, reg2)   "xorq   %%r"reg1", %%r"reg2" \n\t"
-  #define ASM_XOR_VAR(var, reg)     "xorq   "var",     %%r"reg"  \n\t"
-  #define ASM_CMP_REG(reg1, reg2)   "cmpq   %%r"reg1", %%r"reg2" \n\t"
-  #define ASM_MOV_REG(reg1, reg2)   "movq   %%r"reg1", %%r"reg2" \n\t"
-  #define ASM_MOV_VAR(var, reg)     "movq   "var",     %%r"reg"  \n\t"
+  #define ASM_REG(reg)              "%r" reg
+  #define ASM_POP(reg)              "popq   %%r" reg "             \n\t"
+  #define ASM_PUSH(reg)             "pushq  %%r" reg "             \n\t"
+  #define ASM_XOR_REG(reg1, reg2)   "xorq   %%r" reg1 ", %%r" reg2 " \n\t"
+  #define ASM_XOR_VAR(var, reg)     "xorq   " var ",     %%r" reg "  \n\t"
+  #define ASM_CMP_REG(reg1, reg2)   "cmpq   %%r" reg1 ", %%r" reg2 " \n\t"
+  #define ASM_MOV_REG(reg1, reg2)   "movq   %%r" reg1 ", %%r" reg2 " \n\t"
+  #define ASM_MOV_VAR(var, reg)     "movq   " var ",     %%r" reg "  \n\t"
 #endif
 
 #ifdef __PPC__
