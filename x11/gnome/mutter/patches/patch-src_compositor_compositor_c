$OpenBSD: patch-src_compositor_compositor_c,v 1.5 2019/05/09 16:47:51 ajacoutot Exp $

From 3495a438107e7988bd1a5a089c66fa795a3d5981 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Mon, 29 Apr 2019 19:57:03 +0000
Subject: [PATCH] compositor: Destroy window actors list on destruction

From 668c44e66bf681ff50c62766ea9d1ca1d0762ec4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Mon, 29 Apr 2019 20:02:18 +0000
Subject: [PATCH] compositor: Disconnect from stage signals on destruction

undefined reference to `meta_dnd_wayland_handle_begin_modal'

Index: src/compositor/compositor.c
--- src/compositor/compositor.c.orig
+++ src/compositor/compositor.c
@@ -92,6 +92,10 @@ on_presented (ClutterStage     *stage,
               ClutterFrameInfo *frame_info,
               MetaCompositor   *compositor);
 
+static void
+on_top_window_actor_destroyed (MetaWindowActor *window_actor,
+                               MetaCompositor  *compositor);
+
 static gboolean
 is_modal (MetaDisplay *display)
 {
@@ -131,9 +135,31 @@ meta_switch_workspace_completed (MetaCompositor *compo
 void
 meta_compositor_destroy (MetaCompositor *compositor)
 {
+  g_signal_handler_disconnect (compositor->stage,
+                               compositor->stage_after_paint_id);
+  g_signal_handler_disconnect (compositor->stage,
+                               compositor->stage_presented_id);
+
+  compositor->stage_after_paint_id = 0;
+  compositor->stage_presented_id = 0;
+  compositor->stage = NULL;
+
   clutter_threads_remove_repaint_func (compositor->pre_paint_func_id);
   clutter_threads_remove_repaint_func (compositor->post_paint_func_id);
 
+  if (compositor->top_window_actor)
+    {
+      g_signal_handlers_disconnect_by_func (compositor->top_window_actor,
+                                            on_top_window_actor_destroyed,
+                                            compositor);
+      compositor->top_window_actor = NULL;
+    }
+
+  g_clear_pointer (&compositor->window_group, clutter_actor_destroy);
+  g_clear_pointer (&compositor->top_window_group, clutter_actor_destroy);
+  g_clear_pointer (&compositor->feedback_group, clutter_actor_destroy);
+  g_clear_pointer (&compositor->windows, g_list_free);
+
   if (compositor->have_x11_sync_object)
     meta_sync_ring_destroy ();
 }
@@ -385,6 +411,7 @@ meta_begin_modal_for_plugin (MetaCompositor   *composi
                          meta_plugin_get_display (plugin),
                          display->grab_window, display->grab_op);
 
+#ifdef HAVE_WAYLAND
   if (meta_is_wayland_compositor ())
     {
       meta_display_sync_wayland_input_focus (display);
@@ -394,6 +421,7 @@ meta_begin_modal_for_plugin (MetaCompositor   *composi
       meta_dnd_wayland_handle_begin_modal (compositor);
 #endif
     }
+#endif
 
   return TRUE;
 }
@@ -503,9 +531,10 @@ meta_compositor_manage (MetaCompositor *compositor)
 
   compositor->stage = meta_backend_get_stage (backend);
 
-  g_signal_connect (compositor->stage, "presented",
-                    G_CALLBACK (on_presented),
-                    compositor);
+  compositor->stage_presented_id =
+    g_signal_connect (compositor->stage, "presented",
+                      G_CALLBACK (on_presented),
+                                                     compositor);
 
   /* We use connect_after() here to accomodate code in GNOME Shell that,
    * when benchmarking drawing performance, connects to ::after-paint
@@ -515,8 +544,9 @@ meta_compositor_manage (MetaCompositor *compositor)
    * connections to ::after-paint, connect() vs. connect_after() doesn't
    * matter.
    */
-  g_signal_connect_after (CLUTTER_STAGE (compositor->stage), "after-paint",
-                          G_CALLBACK (after_stage_paint), compositor);
+  compositor->stage_after_paint_id =
+    g_signal_connect_after (compositor->stage, "after-paint",
+                            G_CALLBACK (after_stage_paint), compositor);
 
   clutter_stage_set_sync_delay (CLUTTER_STAGE (compositor->stage), META_SYNC_DELAY);
 
