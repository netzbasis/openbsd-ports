$OpenBSD: patch-js_ui_workspace_js,v 1.1 2018/04/29 10:43:33 jasper Exp $

https://gitlab.gnome.org/GNOME/gnome-shell/merge_requests/4/diffs

Index: js/ui/workspace.js
--- js/ui/workspace.js.orig
+++ js/ui/workspace.js
@@ -139,14 +139,8 @@ var WindowClone = new Lang.Class({
 
         this._windowClone._updateId = this.metaWindow.connect('size-changed',
             this._onRealWindowSizeChanged.bind(this));
-        this._windowClone._destroyId =
-            this.realWindow.connect('destroy', () => {
-                // First destroy the clone and then destroy everything
-                // This will ensure that we never see it in the
-                // _disconnectSignals loop
-                this._windowClone.destroy();
-                this.destroy();
-            });
+        this._windowClone._destroyId = this.realWindow.connect('destroy',
+            this.destroy.bind(this));
 
         this._updateAttachedDialogs();
         this._computeBoundingBox();
@@ -310,6 +304,14 @@ var WindowClone = new Lang.Class({
     },
 
     destroy() {
+        this.emit('destroy');
+
+        // First destroy the clone and then destroy everything
+        // This will ensure that we never see it in the _disconnectSignals loop
+        this.metaWindow.disconnect(this._windowClone._updateId);
+        this.realWindow.disconnect(this._windowClone._destroyId);
+        this._windowClone.destroy();
+
         this.actor.destroy();
     },
 
@@ -1131,6 +1133,7 @@ var Workspace = new Lang.Class({
         // Create clones for windows that should be
         // visible in the Overview
         this._windows = [];
+        this._windowsDestroyedIds = [];
         this._windowOverlays = [];
         for (let i = 0; i < windows.length; i++) {
             if (this._isOverviewWindow(windows[i])) {
@@ -1428,7 +1431,7 @@ var Workspace = new Lang.Class({
         return GLib.SOURCE_REMOVE;
     },
 
-    _doRemoveWindow(metaWin) {
+    _doRemoveWindow(metaWin, {cloneDestroy}={cloneDestroy: true}) {
         let win = metaWin.get_compositor_private();
 
         // find the position of the window in our list
@@ -1438,8 +1441,10 @@ var Workspace = new Lang.Class({
             return;
 
         let clone = this._windows[index];
+        clone.disconnect(this._windowsDestroyedIds[index]);
 
         this._windows.splice(index, 1);
+        this._windowsDestroyedIds.splice(index, 1);
         this._windowOverlays.splice(index, 1);
 
         // If metaWin.get_compositor_private() returned non-NULL, that
@@ -1457,9 +1462,11 @@ var Workspace = new Lang.Class({
                 scale: stageWidth / clone.actor.width
             };
         }
-        clone.destroy();
 
+        if (cloneDestroy)
+            clone.destroy();
 
+
         // We need to reposition the windows; to avoid shuffling windows
         // around while the user is interacting with the workspace, we delay
         // the positioning until the pointer remains still for at least 750 ms
@@ -1800,7 +1807,11 @@ var Workspace = new Lang.Class({
             this._actualGeometryLater = 0;
         }
 
+        for (let index = 0; index < this._windows.length; ++index)
+            this._windows[index].disconnect(this._windowsDestroyedIds[index]);
+
         this._windows = [];
+        this._windowsDestroyedIds = [];
     },
 
     // Sets this.leavingOverview flag to false.
@@ -1848,6 +1859,9 @@ var Workspace = new Lang.Class({
         clone.connect('size-changed', () => {
             this._recalculateWindowPositions(WindowPositionFlags.NONE);
         });
+        let cloneDestroyedId = clone.connect('destroy', () => {
+            this._doRemoveWindow(clone.metaWindow, {cloneDestroy: false});
+        });
 
         this.actor.add_actor(clone.actor);
 
@@ -1864,6 +1878,7 @@ var Workspace = new Lang.Class({
             clone.setStackAbove(this._windows[this._windows.length - 1].actor);
 
         this._windows.push(clone);
+        this._windowsDestroyedIds.push(cloneDestroyedId);
         this._windowOverlays.push(overlay);
 
         return [clone, overlay];
