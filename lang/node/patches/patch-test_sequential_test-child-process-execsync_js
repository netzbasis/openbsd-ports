$OpenBSD: patch-test_sequential_test-child-process-execsync_js,v 1.2 2017/10/31 01:31:45 abieber Exp $

Index: test/sequential/test-child-process-execsync.js
--- test/sequential/test-child-process-execsync.js.orig
+++ test/sequential/test-child-process-execsync.js
@@ -24,19 +24,21 @@ assert.throws(
 );
 
 let cmd, ret;
-try {
-  cmd = `"${process.execPath}" -e "setTimeout(function(){}, ${SLEEP});"`;
-  ret = execSync(cmd, {timeout: TIMER});
-} catch (e) {
-  caught = true;
-  assert.strictEqual(e.errno, 'ETIMEDOUT');
-  err = e;
-} finally {
-  assert.strictEqual(ret, undefined, 'we should not have a return value');
-  assert.strictEqual(caught, true, 'execSync should throw');
-  const end = Date.now() - start;
-  assert(end < SLEEP);
-  assert(err.status > 128 || err.signal);
+if (!common.isOpenBSD) {
+  try {
+    cmd = `"${process.execPath}" -e "setTimeout(function(){}, ${SLEEP});"`;
+    ret = execSync(cmd, {timeout: TIMER});
+  } catch (e) {
+    caught = true;
+    assert.strictEqual(e.errno, 'ETIMEDOUT');
+    err = e;
+  } finally {
+    assert.strictEqual(ret, undefined, 'we should not have a return value');
+    assert.strictEqual(caught, true, 'execSync should throw');
+    const end = Date.now() - start;
+    assert(end < SLEEP);
+    assert(err.status > 128 || err.signal);
+  }
 }
 
 assert.throws(function() {
