$OpenBSD: patch-src_syscall_asm_openbsd_arm64_s,v 1.1 2020/02/04 17:22:42 jsing Exp $

Index: src/syscall/asm_openbsd_arm64.s
--- src/syscall/asm_openbsd_arm64.s.orig
+++ src/syscall/asm_openbsd_arm64.s
@@ -4,6 +4,8 @@
 
 #include "textflag.h"
 
+#define NOOP	WORD $0xd503201f
+
 // func Syscall(trap int64, a1, a2, a3 int64) (r1, r2, err int64);
 TEXT ·Syscall(SB),NOSPLIT,$0-56
 	BL	runtime·entersyscall(SB)
@@ -15,6 +17,8 @@ TEXT ·Syscall(SB),NOSPLIT,$0-56
 	MOVD	$0, R5
 	MOVD	trap+0(FP), R8	// syscall number
 	SVC
+	NOOP
+	NOOP
 	BCC	ok
 	MOVD	$-1, R4
 	MOVD	R4, r1+32(FP)	// r1
@@ -39,6 +43,8 @@ TEXT ·Syscall6(SB),NOSPLIT,$0-80
 	MOVD	a6+48(FP), R5
 	MOVD	trap+0(FP), R8	// syscall number
 	SVC
+	NOOP
+	NOOP
 	BCC	ok
 	MOVD	$-1, R4
 	MOVD	R4, r1+56(FP)	// r1
@@ -67,6 +73,8 @@ TEXT ·Syscall9(SB),NOSPLIT,$0-104
 	MOVD	R8, 8(RSP)
 	MOVD	num+0(FP), R8	// syscall number
 	SVC
+	NOOP
+	NOOP
 	BCC	ok
 	MOVD	$-1, R4
 	MOVD	R4, r1+80(FP)	// r1
@@ -90,6 +98,8 @@ TEXT ·RawSyscall(SB),NOSPLIT,$0-56
 	MOVD	$0, R5
 	MOVD	trap+0(FP), R8	// syscall number
 	SVC
+	NOOP
+	NOOP
 	BCC	ok
 	MOVD	$-1, R4
 	MOVD	R4, r1+32(FP)	// r1
@@ -111,6 +121,8 @@ TEXT ·RawSyscall6(SB),NOSPLIT,$0-80
 	MOVD	a6+48(FP), R5
 	MOVD	trap+0(FP), R8	// syscall number
 	SVC
+	NOOP
+	NOOP
 	BCC	ok
 	MOVD	$-1, R4
 	MOVD	R4, r1+56(FP)	// r1
