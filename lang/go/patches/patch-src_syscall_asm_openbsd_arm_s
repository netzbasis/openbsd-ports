$OpenBSD: patch-src_syscall_asm_openbsd_arm_s,v 1.1 2020/03/20 08:02:29 jsing Exp $

Index: src/syscall/asm_openbsd_arm.s
--- src/syscall/asm_openbsd_arm.s.orig
+++ src/syscall/asm_openbsd_arm.s
@@ -15,6 +15,8 @@
 // func RawSyscall(trap int32, a1, a2, a3 int32) (r1, r2, err int32);
 // func RawSyscall6(trap int32, a1, a2, a3, a4, a5, a6 int32) (r1, r2, err int32);
 
+#define NOOP   MOVW R0, R0
+
 TEXT	·Syscall(SB),NOSPLIT,$0-28
 	BL runtime·entersyscall(SB)
 	MOVW trap+0(FP), R12		// syscall number
@@ -22,6 +24,8 @@ TEXT	·Syscall(SB),NOSPLIT,$0-28
 	MOVW a2+8(FP), R1		// arg 2
 	MOVW a3+12(FP), R2		// arg 3
 	SWI $0
+	NOOP
+	NOOP
 	MOVW $0, R2
 	BCS error
 	MOVW R0, r1+16(FP)		// ret 1
@@ -47,6 +51,8 @@ TEXT	·Syscall6(SB),NOSPLIT,$0-40
 	MOVW R13, R4
 	MOVW $a5+20(FP), R13		// arg 5 to arg 6 are passed on stack
 	SWI $0
+	NOOP
+	NOOP
 	MOVW R4, R13
 	MOVW $0, R2
 	BCS error6
@@ -73,6 +79,8 @@ TEXT	·Syscall9(SB),NOSPLIT,$0-52
 	MOVW R13, R4
 	MOVW $a5+20(FP), R13		// arg 5 to arg 9 are passed on stack
 	SWI $0
+	NOOP
+	NOOP
 	MOVW R4, R13
 	MOVW $0, R2
 	BCS error9
@@ -95,6 +103,8 @@ TEXT	·RawSyscall(SB),NOSPLIT,$0-28
 	MOVW a2+8(FP), R1		// arg 2
 	MOVW a3+12(FP), R2		// arg 3
 	SWI $0
+	NOOP
+	NOOP
 	MOVW $0, R2
 	BCS errorr
 	MOVW R0, r1+16(FP)		// ret 1
@@ -117,6 +127,8 @@ TEXT	·RawSyscall6(SB),NOSPLIT,$0-40
 	MOVW R13, R4
 	MOVW $a5+20(FP), R13		// arg 5 to arg 6 are passed on stack
 	SWI $0
+	NOOP
+	NOOP
 	MOVW R4, R13
 	MOVW $0, R2
 	BCS errorr6
