$OpenBSD: patch-nanojit_NativeX64_cpp,v 1.2 2018/04/08 10:53:10 landry Exp $

chunk 1 from FreeBSD's lang/spidermonkey185/files/patch-c++11
Index: nanojit/NativeX64.cpp
--- nanojit/NativeX64.cpp.orig
+++ nanojit/NativeX64.cpp
@@ -1184,7 +1184,7 @@ namespace nanojit
         NanoAssert(allow & rmask(rr));
     }
 
-    static const AVMPLUS_ALIGN16(int64_t) negateMask[] = {0x8000000000000000LL,0};
+    static const AVMPLUS_ALIGN16(int64_t) negateMask[] = {(int64_t)0x8000000000000000LL,0};
 
     void Assembler::asm_fneg(LIns *ins) {
         Register rr, ra;
@@ -1388,9 +1388,9 @@ namespace nanojit
                 // really do need a page break
                 verbose_only(if (_logc->lcbits & LC_Assembly) outputf("newpage %p:", pc);)
                 if (_inExit)
-                    codeAlloc(exitStart, exitEnd, _nIns);
+                    codeAlloc(exitStart, exitEnd, _nIns verbose_only(, exitBytes));
                 else
-                    codeAlloc(codeStart, codeEnd, _nIns);
+                    codeAlloc(codeStart, codeEnd, _nIns verbose_only(, codeBytes));
             }
             // now emit the jump, but make sure we won't need another page break.
             // we're pedantic, but not *that* pedantic.
@@ -1402,9 +1402,9 @@ namespace nanojit
         if (pc - bytes < top) {
             verbose_only(if (_logc->lcbits & LC_Assembly) outputf("newpage %p:", pc);)
             if (_inExit)
-                codeAlloc(exitStart, exitEnd, _nIns);
+                codeAlloc(exitStart, exitEnd, _nIns verbose_only(, exitBytes));
             else
-                codeAlloc(codeStart, codeEnd, _nIns);
+                codeAlloc(codeStart, codeEnd, _nIns verbose_only(, codeBytes));
             // this jump will call underrunProtect again, but since we're on a new
             // page, nothing will happen.
             JMP(pc);
@@ -1418,11 +1418,11 @@ namespace nanojit
 
     void Assembler::nativePageSetup() {
         if (!_nIns) {
-            codeAlloc(codeStart, codeEnd, _nIns);
+            codeAlloc(codeStart, codeEnd, _nIns verbose_only(, codeBytes));
             IF_PEDANTIC( pedanticTop = _nIns; )
         }
         if (!_nExitIns) {
-            codeAlloc(exitStart, exitEnd, _nExitIns);
+            codeAlloc(exitStart, exitEnd, _nExitIns verbose_only(, exitBytes));
         }
     }
 
