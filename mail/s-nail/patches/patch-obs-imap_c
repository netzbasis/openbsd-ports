--- obs-imap.c
+++ obs-imap.c
@@ -246,10 +246,9 @@ static enum okay  imap_list(struct mailbox *mp, const char *base, int strip,
 static enum okay  imap_copy1(struct mailbox *mp, struct message *m, int n,
                      const char *name);
 static enum okay  imap_copyuid_parse(const char *cp,
-                     unsigned long *uidvalidity, unsigned long *olduid,
-                     unsigned long *newuid);
+                     ui64_t *uidvalidity, ui64_t *olduid, ui64_t *newuid);
 static enum okay  imap_appenduid_parse(const char *cp,
-                     unsigned long *uidvalidity, unsigned long *uid);
+                     ui64_t *uidvalidity, ui64_t *uid);
 static enum okay  imap_copyuid(struct mailbox *mp, struct message *m,
                      const char *name);
 static enum okay  imap_appenduid(struct mailbox *mp, FILE *fp, time_t t,
@@ -3465,16 +3464,16 @@ imap_copy(struct message *m, int n, const char *name)
 }

 static enum okay
-imap_copyuid_parse(const char *cp, unsigned long *uidvalidity,
-   unsigned long *olduid, unsigned long *newuid)
+imap_copyuid_parse(const char *cp, ui64_t *uidvalidity, ui64_t *olduid,
+   ui64_t *newuid)
 {
-   char *xp, *yp, *zp;
+   char const *xp, *yp, *zp;
    enum okay rv;
    NYD_ENTER;

-   *uidvalidity = strtoul(cp, &xp, 10);
-   *olduid = strtoul(xp, &yp, 10);
-   *newuid = strtoul(yp, &zp, 10);
+   n_idec_ui64_cp(uidvalidity, cp, 10, &xp); /* TODO errors */
+   n_idec_ui64_cp(olduid, xp, 10, &yp); /* TODO errors */
+   n_idec_ui64_cp(newuid, yp, 10, &zp); /* TODO errors */
    rv = (*uidvalidity && *olduid && *newuid && xp > cp && *xp == ' ' &&
       yp > xp && *yp == ' ' && zp > yp && *zp == ']');
    NYD_LEAVE;
@@ -3482,15 +3481,14 @@ imap_copyuid_parse(const char *cp, unsigned long *uidvalidity,
 }

 static enum okay
-imap_appenduid_parse(const char *cp, unsigned long *uidvalidity,
-   unsigned long *uid)
+imap_appenduid_parse(const char *cp, ui64_t *uidvalidity, ui64_t *uid)
 {
-   char *xp, *yp;
+   char const *xp, *yp;
    enum okay rv;
    NYD_ENTER;

-   *uidvalidity = strtoul(cp, &xp, 10);
-   *uid = strtoul(xp, &yp, 10);
+   n_idec_ui64_cp(uidvalidity, cp, 10, &xp); /* TODO errors */
+   n_idec_ui64_cp(uid, xp, 10, &yp); /* TODO errors */
    rv = (*uidvalidity && *uid && xp > cp && *xp == ' ' && yp > xp &&
       *yp == ']');
    NYD_LEAVE;
