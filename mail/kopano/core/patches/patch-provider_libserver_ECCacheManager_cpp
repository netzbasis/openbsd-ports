$OpenBSD: patch-provider_libserver_ECCacheManager_cpp,v 1.4 2019/05/09 14:52:33 robert Exp $

Index: provider/libserver/ECCacheManager.cpp
--- provider/libserver/ECCacheManager.cpp.orig
+++ provider/libserver/ECCacheManager.cpp
@@ -670,8 +670,8 @@ exit:
 	return er;
 }
 
-ECRESULT ECCacheManager::get_all_user_objects(objectclass_t ocls,
-    std::map<unsigned int, ECsUserObject> &out)
+ECRESULT ECCacheManager::get_all_user_objects(objectclass_t ocls, bool hosted,
+    unsigned int company, std::map<unsigned int, ECsUserObject> &out)
 {
 	ECDatabase *db = nullptr;
 	DB_RESULT result;
@@ -680,18 +680,33 @@ ECRESULT ECCacheManager::get_all_user_objects(objectcl
 	auto ret = m_lpDatabaseFactory->get_tls_db(&db);
 	if (ret != erSuccess)
 		return ret;
-	ret = db->DoSelect("SELECT externid, objectclass, signature, company, id "
-	      "FROM users WHERE " + OBJECTCLASS_COMPARE_SQL("objectclass", ocls), &result);
+	auto query = "SELECT externid, objectclass, signature, company, id "
+              "FROM users WHERE " + OBJECTCLASS_COMPARE_SQL("objectclass", ocls);
+	/*
+	 * As long as the Offline server has partial hosted support, we must
+	 * comment out this additional where statement...
+	 */
+	if (hosted)
+		/*
+		 * Everyone and SYSTEM do not have a company but must be
+		 * included by the query, so write exception case for them.
+		 */
+		query += " AND (company=" + stringify(company) +
+		         " OR id=" + stringify(company) +
+		         " OR id=" + stringify(KOPANO_UID_SYSTEM) +
+		         " OR id=" + stringify(KOPANO_UID_EVERYONE) + ")";
+	ret = db->DoSelect(query, &result);
 	if (ret != erSuccess)
 		return KCERR_DATABASE_ERROR;
 
 	out.clear();
 	while ((row = result.fetch_row()) != nullptr) {
 		ECsUserObject u;
+		auto lengths = result.fetch_row_lengths();
 		if (row[0] != nullptr)
-			u.strExternId = row[0];
+			u.strExternId.assign(row[0], lengths[0]);
 		u.ulClass = static_cast<objectclass_t>(atoui(row[1]));
-		u.strSignature = row[2];
+		u.strSignature.assign(row[2], lengths[2]);
 		u.ulCompanyId = atoui(row[3]);
 		I_AddUserObject(atoui(row[4]), u.ulClass, u.ulCompanyId, u.strExternId, u.strSignature);
 		out.emplace(atoui(row[4]), std::move(u));
