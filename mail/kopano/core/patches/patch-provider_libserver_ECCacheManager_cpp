$OpenBSD: patch-provider_libserver_ECCacheManager_cpp,v 1.1 2018/03/16 15:35:02 robert Exp $

Index: provider/libserver/ECCacheManager.cpp
--- provider/libserver/ECCacheManager.cpp.orig
+++ provider/libserver/ECCacheManager.cpp
@@ -104,33 +104,33 @@ ECCacheManager::ECCacheManager(ECConfig *lpConfig,
 		#else
 		m_CellCache.AddToSize(256 * 1000 * 1024);
 		#endif
-		ec_log_info("Setting cell cache size: %lu", m_CellCache.Size());
+		ec_log_info("Setting cell cache size: %llu", m_CellCache.Size());
 	}
 
 	auto cell_cache_size = m_CellCache.Size();
 
 	if (atoll(lpConfig->GetSetting("cache_object_size")) == 0) {
-		m_ObjectsCache.AddToSize(std::min(size_t(16 * 1000 * 1024), cell_cache_size / 16));
-		ec_log_info("Setting object cache size: %lu", m_ObjectsCache.Size());
+		m_ObjectsCache.AddToSize(std::min((unsigned long long)(16 * 1000 * 1024), cell_cache_size / 16));
+		ec_log_info("Setting object cache size: %llu", m_ObjectsCache.Size());
 	}
 
 	if (atoll(lpConfig->GetSetting("cache_indexedobject_size")) == 0) {
-		m_PropToObjectCache.AddToSize(std::min(size_t(32 * 1000 * 1024), cell_cache_size / 8));
-		m_ObjectToPropCache.AddToSize(std::min(size_t(32 * 1000 * 1024), cell_cache_size / 8));
-		ec_log_info("Setting indexedobject cache size: %lu", m_PropToObjectCache.Size());
+		m_PropToObjectCache.AddToSize(std::min((unsigned long long)(32 * 1000 * 1024), cell_cache_size / 8));
+		m_ObjectToPropCache.AddToSize(std::min((unsigned long long)(32 * 1000 * 1024), cell_cache_size / 8));
+		ec_log_info("Setting indexedobject cache size: %llu", m_PropToObjectCache.Size());
 	}
 
 	if (atoll(lpConfig->GetSetting("cache_quota_size")) == 0) {
-		m_QuotaCache.AddToSize(std::min(size_t(1 * 1000 * 1024), cell_cache_size / 256));
-		m_QuotaUserDefaultCache.AddToSize(std::min(size_t(1 * 1000 * 1024), cell_cache_size / 256));
-		ec_log_info("Setting quota cache size: %lu", m_QuotaCache.Size());
+		m_QuotaCache.AddToSize(std::min((unsigned long long)(1 * 1000 * 1024), cell_cache_size / 256));
+		m_QuotaUserDefaultCache.AddToSize(std::min((unsigned long long)(1 * 1000 * 1024), cell_cache_size / 256));
+		ec_log_info("Setting quota cache size: %llu", m_QuotaCache.Size());
 	}
 
 	if (atoll(lpConfig->GetSetting("cache_userdetails_size")) == 0) {
-		m_UserObjectCache.AddToSize(std::min(size_t(25 * 1000 * 1024), cell_cache_size / 10));
-		m_UEIdObjectCache.AddToSize(std::min(size_t(25 * 1000 * 1024), cell_cache_size / 10));
-		m_UserObjectDetailsCache.AddToSize(std::min(size_t(25 * 1000 * 1024), cell_cache_size / 10));
-		ec_log_info("Setting userdetails cache size: %lu", m_UserObjectCache.Size());
+		m_UserObjectCache.AddToSize(std::min((unsigned long long)(25 * 1000 * 1024), cell_cache_size / 10));
+		m_UEIdObjectCache.AddToSize(std::min((unsigned long long)(25 * 1000 * 1024), cell_cache_size / 10));
+		m_UserObjectDetailsCache.AddToSize(std::min((unsigned long long)(25 * 1000 * 1024), cell_cache_size / 10));
+		ec_log_info("Setting userdetails cache size: %llu", m_UserObjectCache.Size());
 	}
 
 	/* Initial cleaning/initialization of cache */
