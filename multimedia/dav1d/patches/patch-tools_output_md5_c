$OpenBSD: patch-tools_output_md5_c,v 1.1 2019/03/15 06:11:51 ajacoutot Exp $

- tools/dav1d: make the md5 muxer endian-aware
- tools/dav1d/md5: bswap big endian high bit depth pixel data

Index: tools/output/md5.c
--- tools/output/md5.c.orig
+++ tools/output/md5.c
@@ -63,11 +63,36 @@ static const unsigned k[] = {
     0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391,
 };
 
+
+#if ENDIANNESS_BIG
+#define NE2LE_32(x) (((x & 0x00ff) << 24) |\
+                     ((x & 0xff00) <<  8) |\
+                     ((x >>  8) & 0xff00) |\
+                     ((x >> 24) & 0x00ff))
+
+#define NE2LE_64(x) (((x & 0x000000ff) << 56) |\
+                     ((x & 0x0000ff00) << 40) |\
+                     ((x & 0x00ff0000) << 24) |\
+                     ((x & 0xff000000) <<  8) |\
+                     ((x >>  8) & 0xff000000) |\
+                     ((x >> 24) & 0x00ff0000) |\
+                     ((x >> 40) & 0x0000ff00) |\
+                     ((x >> 56) & 0x000000ff))
+
+#else
+#define NE2LE_32(x) (x)
+#define NE2LE_64(x) (x)
+#endif
+
 typedef struct MuxerPriv {
     unsigned abcd[4];
     uint8_t data[64];
     uint64_t len;
     FILE *f;
+#if ENDIANNESS_BIG
+    uint8_t *bswap;
+    int bswap_w;
+#endif
 } MD5Context;
 
 static int md5_open(MD5Context *const md5, const char *const file,
@@ -81,6 +106,11 @@ static int md5_open(MD5Context *const md5, const char 
         return -1;
     }
 
+#if ENDIANNESS_BIG
+    md5->bswap = NULL;
+    md5->bswap_w = 0;
+#endif
+
     md5->abcd[0] = 0x67452301;
     md5->abcd[1] = 0xefcdab89;
     md5->abcd[2] = 0x98badcfe;
@@ -123,7 +153,7 @@ static void md5_body(MD5Context *md5, const uint8_t *c
         tmp = d;
         d = c;
         c = b;
-        b += leftrotate(a + f + k[i] + data[g], s[i >> 4][i & 3]);
+        b += leftrotate(a + f + k[i] + NE2LE_32(data[g]), s[i >> 4][i & 3]);
         a = tmp;
     }
 
@@ -166,7 +196,26 @@ static int md5_write(MD5Context *const md5, Dav1dPictu
     const int w = p->p.w, h = p->p.h;
     uint8_t *yptr = p->data[0];
 
+#if ENDIANNESS_BIG
+    if (hbd && (!md5->bswap || md5->bswap_w < p->p.w)) {
+        free(md5->bswap);
+        md5->bswap_w = 0;
+        md5->bswap = malloc(p->p.w << 1);
+        if (!md5->bswap) return -1;
+        md5->bswap_w = p->p.w;
+    }
+#endif
+
     for (int y = 0; y < h; y++) {
+#if ENDIANNESS_BIG
+        if (hbd) {
+            for (int x = 0; x < w; x++) {
+                md5->bswap[2 * x + 1] = yptr[2 * x];
+                md5->bswap[2 * x]     = yptr[2 * x + 1];
+            }
+            md5_update(md5, md5->bswap, w << hbd);
+        } else
+#endif
         md5_update(md5, yptr, w << hbd);
         yptr += p->stride[0];
     }
@@ -180,6 +229,15 @@ static int md5_write(MD5Context *const md5, Dav1dPictu
             uint8_t *uvptr = p->data[pl];
 
             for (int y = 0; y < ch; y++) {
+#if ENDIANNESS_BIG
+                if (hbd) {
+                    for (int x = 0; x < cw; x++){
+                        md5->bswap[2 * x + 1] = uvptr[2 * x];
+                        md5->bswap[2 * x]     = uvptr[2 * x + 1];
+                    }
+                    md5_update(md5, md5->bswap, cw << hbd);
+                } else
+#endif
                 md5_update(md5, uvptr, cw << hbd);
                 uvptr += p->stride[1];
             }
@@ -193,7 +251,7 @@ static int md5_write(MD5Context *const md5, Dav1dPictu
 
 static void md5_finish(MD5Context *const md5) {
     static const uint8_t bit[2] = { 0x80, 0x00 };
-    uint64_t len = md5->len << 3;
+    uint64_t len = NE2LE_64(md5->len << 3);
 
     md5_update(md5, &bit[0], 1);
     while ((md5->len & 63) != 56)
@@ -211,6 +269,11 @@ static void md5_close(MD5Context *const md5) {
                 md5->abcd[i] >> 24);
     fprintf(md5->f, "\n");
 
+#if ENDIANNESS_BIG
+    free(md5->bswap);
+    md5->bswap_w = 0;
+#endif
+
     if (md5->f != stdout)
         fclose(md5->f);
 }
@@ -234,6 +297,11 @@ static int md5_verify(MD5Context *const md5, const cha
             abcd[i] |= val << (8 * j);
         }
     }
+
+#if ENDIANNESS_BIG
+    free(md5->bswap);
+    md5->bswap_w = 0;
+#endif
 
     return !!memcmp(abcd, md5->abcd, sizeof(abcd));
 }
