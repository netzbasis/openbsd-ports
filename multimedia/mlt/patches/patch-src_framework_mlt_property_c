$OpenBSD: patch-src_framework_mlt_property_c,v 1.2 2020/05/18 19:33:43 espie Exp $
note: if/when OpenBSD gets LC_NUMERIC locale support, the code should be
revisited to use threads locale functions (see uselocale(3)), because a
mutex is not enough to prevent unsupported usage of non thread-safe 
locale functions from dumping core!

Index: src/framework/mlt_property.c
--- src/framework/mlt_property.c.orig
+++ src/framework/mlt_property.c
@@ -90,8 +90,12 @@ struct mlt_property_s
 mlt_property mlt_property_init( )
 {
 	mlt_property self = calloc( 1, sizeof( *self ) );
-	if ( self )
-		pthread_mutex_init( &self->mutex, NULL );
+	if ( self ) {
+		pthread_mutexattr_t attr;
+		pthread_mutexattr_init(&attr);
+		pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
+		pthread_mutex_init( &self->mutex, &attr );
+	}
 	return self;
 }
 
@@ -756,7 +760,7 @@ char *mlt_property_get_string_l_tf( mlt_property self,
 	}
 	else if ( ! ( self->types & mlt_prop_string ) )
 	{
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__OpenBSD__)
 		// TODO: when glibc gets sprintf_l, start using it! For now, hack on setlocale.
 		// Save the current locale
 #if defined(__APPLE__)
@@ -802,7 +806,7 @@ char *mlt_property_get_string_l_tf( mlt_property self,
 			self->types |= mlt_prop_string;
 			self->prop_string = self->serialiser( self->data, self->length );
 		}
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__OpenBSD__)
 		// Restore the current locale
 		setlocale( LC_NUMERIC, orig_localename );
 		free( orig_localename );
