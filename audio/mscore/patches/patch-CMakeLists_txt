$OpenBSD: patch-CMakeLists_txt,v 1.3 2015/08/22 02:47:27 bcallah Exp $
--- CMakeLists.txt.orig	Thu Jul 16 17:02:34 2015
+++ CMakeLists.txt	Fri Aug 21 18:42:23 2015
@@ -125,7 +125,7 @@ else (APPLE)
       set(CMAKE_CXX_FLAGS_RELEASE "-std=gnu++0x -mno-ms-bitfields -O2 -DNDEBUG -DQT_NO_DEBUG")
    else (MINGW)
       set(CMAKE_CXX_FLAGS_DEBUG   "-std=c++11 -fPIC -fPIE -g")
-      set(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -fPIC -O2 -DNDEBUG -DQT_NO_DEBUG")
+      set(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -fPIC -DNDEBUG -DQT_NO_DEBUG")
    endif (MINGW)
 endif(APPLE)
 
@@ -194,11 +194,11 @@ endif (APPLE)
 ## alsa >= 1.0.0
 ##
 
-if (APPLE OR MINGW)
+if (APPLE OR MINGW OR UNIX)
       message("Disabling ALSA support due to OS X or MINGW build.")
       set (USE_ALSA 0)
       set (HAS_MIDI 1)
-else (APPLE OR MINGW)
+else (APPLE OR MINGW OR UNIX)
       PKGCONFIG (alsa 1.0.0 ALSA_INCDIR ALSA_LIBDIR ALSA_LIB ALSA_CPP )
       if (NOT ALSA_INCDIR)
             message(FATAL_ERROR "Fatal error: ALSA >= 1.0.0 required")
@@ -207,7 +207,7 @@ else (APPLE OR MINGW)
             set (USE_ALSA 1)
             set (HAS_MIDI 1)
       endif (NOT ALSA_INCDIR)
-endif (APPLE OR MINGW)
+endif (APPLE OR MINGW OR UNIX)
 
 ##
 ## pulseaudio
@@ -217,8 +217,8 @@ if (APPLE OR MINGW)
       set (USE_PULSEAUDIO 0)
 else (APPLE OR MINGW)
       if (PULSEAUDIO_FOUND)
-            set(USE_PULSEAUDIO 1)
-            message("Pulseaudio found.")
+            set(USE_PULSEAUDIO 0)
+            message("Pulseaudio not used.")
       else (PULSEAUDIO_FOUND)
             set(USE_PULSEAUDIO 0)
             message("Pulseaudio not found.")
@@ -431,7 +431,7 @@ if (NOT MINGW AND NOT APPLE)
             )
     endif (GZIP_EXECUTABLE AND NOT CMAKE_SYSTEM_NAME MATCHES "OpenBSD")
     # install man pages in either compressed or uncompressed form
-    install( FILES ${MAN_TARGET} DESTINATION share/man/man1 COMPONENT doc)
+    install( FILES ${MAN_TARGET} DESTINATION man/man1 COMPONENT doc)
     # add .MSCZ and .MSCX to MIME database (informs system that filetypes .MSCZ & .MSCX are MuseScore files)
     install( FILES ${PROJECT_SOURCE_DIR}/build/musescore.xml DESTINATION share/mime/packages COMPONENT doc)
     # Note: must now run "update-mime-database" to apply changes. This is done in the Makefile.
@@ -449,11 +449,11 @@ add_custom_command(
     DEPENDS ${PROJECT_SOURCE_DIR}/all.h
     WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
     )
-if (MINGW)
+if (MINGW OR UNIX)
   set(BUILD_PCH false)
-else (MINGW)
+else (MINGW OR UNIX)
   set(BUILD_PCH true)
-endif(MINGW)
+endif(MINGW OR UNIX)
 
 precompiled_header(QT_INCLUDES all ${BUILD_PCH})
 
@@ -528,18 +528,18 @@ include(Packaging)
 ##  custom target for translation generation
 ##
 
-add_custom_target(lupdate
+add_custom_target(lupdate-qt5
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-qt-projectfile ${PROJECT_SOURCE_DIR} > mscore.pro
-   COMMAND ${QT_LUPDATE_EXECUTABLE} ${PROJECT_BINARY_DIR}/mscore.pro
+   COMMAND lupdate-qt5 ${PROJECT_BINARY_DIR}/mscore.pro
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-instruments-projectfile ${PROJECT_SOURCE_DIR}/share/instruments > instruments.pro
-   COMMAND ${QT_LUPDATE_EXECUTABLE} ${PROJECT_BINARY_DIR}/instruments.pro
+   COMMAND lupdate-qt5 ${PROJECT_BINARY_DIR}/instruments.pro
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
 
-add_custom_target(lrelease
+add_custom_target(lrelease-qt5
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-qt-projectfile ${PROJECT_SOURCE_DIR} > mscore.pro
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-qt-projectfile ${PROJECT_SOURCE_DIR}/share/instruments > instruments.pro
-   COMMAND ${QT_LRELEASE_EXECUTABLE} ${PROJECT_SOURCE_DIR}/share/locale/*.ts
+   COMMAND lrelease-qt5 ${PROJECT_SOURCE_DIR}/share/locale/*.ts
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
 
