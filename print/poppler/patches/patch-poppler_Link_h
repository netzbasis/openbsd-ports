$OpenBSD: patch-poppler_Link_h,v 1.1 2020/03/30 18:26:06 kili Exp $

Upstream commit 81a86064c14a7fc25047b6040d65464e732cf501 (Adam
Reichold):

Fix vague linkage of Link* class vtables

Due to falling back to the implicitly inline destructors, some of
the Link* classes had all their overridden methods defined inline
with made the linkage of their vtables vague.

This change moves their destructors into a defined translation unit
thereby anchoring their vtables in the libpoppler DSO which fixes
issues using dynamic_cast when builing Poppler using Clang.

Index: poppler/Link.h
--- poppler/Link.h.orig
+++ poppler/Link.h
@@ -164,6 +164,8 @@ class LinkGoTo: public LinkAction { (public)
   // Build a LinkGoTo from a destination (dictionary, name, or string).
   LinkGoTo(const Object *destObj);
 
+  ~LinkGoTo() override;
+
   // Was the LinkGoTo created successfully?
   bool isOk() const override { return dest || namedDest; }
 
@@ -191,6 +193,8 @@ class LinkGoToR: public LinkAction { (public)
   // (dictionary, name, or string).
   LinkGoToR(Object *fileSpecObj, Object *destObj);
 
+  ~LinkGoToR() override;
+
   // Was the LinkGoToR created successfully?
   bool isOk() const override { return fileName && (dest || namedDest); }
 
@@ -243,6 +247,8 @@ class LinkURI: public LinkAction { (public)
   // Build a LinkURI given the URI (string) and base URI.
   LinkURI(const Object *uriObj, const GooString *baseURI);
 
+  ~LinkURI() override;
+
   // Was the LinkURI created successfully?
   bool isOk() const override { return hasURIFlag; }
 
@@ -266,6 +272,8 @@ class LinkNamed: public LinkAction { (public)
   // Build a LinkNamed given the action name.
   LinkNamed(const Object *nameObj);
 
+  ~LinkNamed() override;
+
   bool isOk() const override { return hasNameFlag; }
 
   LinkActionKind getKind() const override { return actionNamed; }
@@ -294,6 +302,8 @@ class LinkMovie: public LinkAction { (public)
 
   LinkMovie(const Object *obj);
 
+  ~LinkMovie() override;
+
   bool isOk() const override { return hasAnnotRef() || hasAnnotTitleFlag; }
   LinkActionKind getKind() const override { return actionMovie; }
 
@@ -374,6 +384,8 @@ class LinkSound: public LinkAction { (public)
 
   LinkSound(const Object *soundObj);
 
+  ~LinkSound() override;
+
   bool isOk() const override { return sound != nullptr; }
 
   LinkActionKind getKind() const override { return actionSound; }
@@ -403,6 +415,8 @@ class LinkJavaScript: public LinkAction { (public)
   // Build a LinkJavaScript given the action name.
   LinkJavaScript(Object *jsObj);
 
+  ~LinkJavaScript() override;
+
   bool isOk() const override { return isValid; }
 
   LinkActionKind getKind() const override { return actionJavaScript; }
@@ -423,7 +437,7 @@ class LinkOCGState: public LinkAction {
 public:
   LinkOCGState(const Object *obj);
 
-  ~LinkOCGState() override = default;
+  ~LinkOCGState() override;
 
   bool isOk() const override { return isValid; }
 
@@ -454,6 +468,8 @@ class LinkHide: public LinkAction {
 public:
   LinkHide(const Object *hideObj);
 
+  ~LinkHide() override;
+
   bool isOk() const override { return hasTargetNameFlag; }
   LinkActionKind getKind() const override { return actionHide; }
 
@@ -488,6 +504,8 @@ class LinkUnknown: public LinkAction { (public)
 
   // Build a LinkUnknown with the specified action type.
   LinkUnknown(const char *actionA);
+
+  ~LinkUnknown() override;
 
   // Was the LinkUnknown create successfully?
   // Yes: nothing can go wrong when creating LinkUnknown objects
