$OpenBSD: patch-net_c,v 1.4 2017/04/14 21:53:06 dhill Exp $
--- net.c.orig	Mon Aug  1 09:07:58 2016
+++ net.c	Fri Apr 14 10:37:33 2017
@@ -428,6 +428,7 @@ void net_send_tcp(int index)
   connect(s, (struct sockaddr *) &remote, len);
 }
 
+#ifdef IPPROTO_SCTP
 /*  Attempt to connect to a SCTP port with a TTL */
 void net_send_sctp(int index)
 {
@@ -544,6 +545,7 @@ void net_send_sctp(int index)
 
   connect(s, (struct sockaddr *) &remote, len);
 }
+#endif
 
 /*  Attempt to find the host at a particular number of hops away  */
 void net_send_query(int index) 
@@ -553,10 +555,12 @@ void net_send_query(int index) 
     return;
   }
   
+#ifdef IPPROTO_SCTP
   if (mtrtype == IPPROTO_SCTP) {
     net_send_sctp(index);
     return;
   }
+#endif
 
   /*ok  char packet[sizeof(struct IPHeader) + sizeof(struct ICMPHeader)];*/
   char packet[MAXPACKET];
@@ -724,10 +728,7 @@ void net_send_query(int index) 
 #endif
   }
 
-  /* sendto() assumes packet length includes the IPv4 header but not the 
-     IPv6 header. */
-  spacketsize = abs(packetsize)	-
-		( ( af == AF_INET ) ? 0 : sizeof (struct ip6_hdr) );
+  spacketsize = abs(packetsize);	
   rv = sendto(sendsock, packet, spacketsize, 0, remotesockaddr, salen);
   if (first && (rv < 0) && ((errno == EINVAL) || (errno == EMSGSIZE))) {
     /* Try the first packet again using host byte order. */
@@ -872,7 +873,9 @@ void net_process_return(void) 
   struct ICMPHeader *header = NULL;
   struct UDPHeader *udpheader = NULL;
   struct TCPHeader *tcpheader = NULL;
+#ifdef IPPROTO_SCTP
   struct SCTPHeader *sctpheader = NULL;
+#endif
   struct timeval now;
   ip_t * fromaddress = NULL;
   int echoreplytype = 0, timeexceededtype = 0, unreachabletype = 0;
@@ -1046,6 +1049,7 @@ void net_process_return(void) 
     }
     break;
     
+#ifdef IPPROTO_SCTP
   case IPPROTO_SCTP:
     if (header->type == timeexceededtype || header->type == unreachabletype) {
       switch ( af ) {
@@ -1082,6 +1086,7 @@ void net_process_return(void) 
       sequence = ntohs(sctpheader->srcport);
     }
     break;
+#endif
   }
   if (sequence)
     net_process_ping (sequence, mpls, (void *) fromaddress, now);
