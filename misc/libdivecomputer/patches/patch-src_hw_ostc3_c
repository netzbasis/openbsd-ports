$OpenBSD: patch-src_hw_ostc3_c,v 1.1.1.1 2018/08/14 16:12:55 schwarze Exp $
Remove obvious third-party files aes.c and aes.h
that have no author information and no license.

Index: src/hw_ostc3.c
--- src/hw_ostc3.c.orig
+++ src/hw_ostc3.c
@@ -29,7 +29,6 @@
 #include "device-private.h"
 #include "serial.h"
 #include "array.h"
-#include "aes.h"
 #include "platform.h"
 
 #define ISINSTANCE(device) dc_device_isinstance((device), &hw_ostc3_device_vtable)
@@ -1064,7 +1063,9 @@ hw_ostc3_firmware_readfile3 (hw_ostc3_firmware_t *firm
 	bytes += 16;
 
 	// Load the iv for AES-FCB-mode
-	AES128_ECB_encrypt (iv, ostc3_key, tmpbuf);
+	// AES128_ECB_encrypt (iv, ostc3_key, tmpbuf);
+	ERROR (context, "No license for AES128_ECB_encrypt().");
+	return DC_STATUS_UNSUPPORTED;
 
 	for (addr = 0; addr < SZ_FIRMWARE; addr += 16, bytes += 16) {
 		rc = hw_ostc3_firmware_readline (fp, context, bytes, encrypted, sizeof(encrypted));
@@ -1079,7 +1080,9 @@ hw_ostc3_firmware_readfile3 (hw_ostc3_firmware_t *firm
 			firmware->data[addr + i] = encrypted[i] ^ tmpbuf[i];
 
 		// Run the next round of encryption
-		AES128_ECB_encrypt (encrypted, ostc3_key, tmpbuf);
+		// AES128_ECB_encrypt (encrypted, ostc3_key, tmpbuf);
+        	ERROR (context, "No license for AES128_ECB_encrypt().");
+		return DC_STATUS_UNSUPPORTED;
 	}
 
 	// This file format contains a tail with the checksum in
