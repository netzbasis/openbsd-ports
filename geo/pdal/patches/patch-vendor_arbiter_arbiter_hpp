$OpenBSD: patch-vendor_arbiter_arbiter_hpp,v 1.1 2019/04/24 08:14:17 landry Exp $

our ancient zlib doesnt have z_const

Index: vendor/arbiter/arbiter.hpp
--- vendor/arbiter/arbiter.hpp.orig
+++ vendor/arbiter/arbiter.hpp
@@ -2921,7 +2921,8 @@ class Compressor
         }
 #pragma GCC diagnostic pop
 
-        deflate_s.next_in = reinterpret_cast<z_const Bytef*>(data);
+        char* data2 = strdup(data);
+        deflate_s.next_in = reinterpret_cast<Bytef*>(data2);
         deflate_s.avail_in = static_cast<unsigned int>(size);
 
         std::size_t size_compressed = 0;
@@ -2946,6 +2947,7 @@ class Compressor
 
         deflateEnd(&deflate_s);
         output.resize(size_compressed);
+        free(data2);
     }
 };
 
@@ -3050,19 +3052,22 @@ class Decompressor
             throw std::runtime_error("inflate init failed");
         }
 #pragma GCC diagnostic pop
-        inflate_s.next_in = reinterpret_cast<z_const Bytef*>(data);
+        char* data2 = strdup(data);
+        inflate_s.next_in = reinterpret_cast<Bytef*>(data2);
 
 #ifdef DEBUG
         // Verify if size (long type) input will fit into unsigned int, type used for zlib's avail_in
         std::uint64_t size_64 = size * 2;
         if (size_64 > std::numeric_limits<unsigned int>::max())
         {
+            free(data2);
             inflateEnd(&inflate_s);
             throw std::runtime_error("size arg is too large to fit into unsigned int type x2");
         }
 #endif
         if (size > max_ || (size * 2) > max_)
         {
+            free(data2);
             inflateEnd(&inflate_s);
             throw std::runtime_error("size may use more memory than intended when decompressing");
         }
@@ -3073,6 +3078,7 @@ class Decompressor
             std::size_t resize_to = size_uncompressed + 2 * size;
             if (resize_to > max_)
             {
+                free(data2);
                 inflateEnd(&inflate_s);
                 throw std::runtime_error("size of output string will use more memory then intended when decompressing");
             }
@@ -3083,6 +3089,7 @@ class Decompressor
             if (ret != Z_STREAM_END && ret != Z_OK && ret != Z_BUF_ERROR)
             {
                 std::string error_msg = inflate_s.msg;
+                free(data2);
                 inflateEnd(&inflate_s);
                 throw std::runtime_error(error_msg);
             }
@@ -3091,6 +3098,7 @@ class Decompressor
         } while (inflate_s.avail_out == 0);
         inflateEnd(&inflate_s);
         output.resize(size_uncompressed);
+        free(data2);
     }
 };
 
