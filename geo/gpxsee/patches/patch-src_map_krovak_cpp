$OpenBSD: patch-src_map_krovak_cpp,v 1.2 2020/01/24 08:02:36 landry Exp $
https://github.com/tumic0/GPXSee/issues/266

../src/map/krovak.h:21:17: error: expected member name or ';' after declaration specifiers
        double _e, _A, _B, _t0, _n, _r0, _phiP;
        ~~~~~~         ^
/usr/include/ctype.h:52:12: note: expanded from macro '_B'
#define _B      0x80

Index: src/map/krovak.cpp
--- src/map/krovak.cpp.orig
+++ src/map/krovak.cpp
@@ -17,10 +17,10 @@ Krovak::Krovak(const Ellipsoid *ellipsoid, double stan
 	_e = sqrt(ellipsoid->es());
 	_A = ellipsoid->radius() * sqrt(1.0 - ellipsoid->es())
 	  / (1.0 - ellipsoid->es() * sinPhiC2);
-	_B = sqrt(1.0 + (ellipsoid->es() * cosPhiC4 / (1.0 - ellipsoid->es())));
-	double gamma0 = asin(sinPhiC / _B);
+	B = sqrt(1.0 + (ellipsoid->es() * cosPhiC4 / (1.0 - ellipsoid->es())));
+	double gamma0 = asin(sinPhiC / B);
 	_t0 = tan(M_PI_4 + gamma0 / 2.0) * pow((1.0 + _e * sinPhiC) /
-	  (1.0 - _e * sinPhiC), _e*_B / 2.0) / pow(tan(M_PI_4 + phiC/2.0), _B);
+	  (1.0 - _e * sinPhiC), _e*B / 2.0) / pow(tan(M_PI_4 + phiC/2.0), B);
 	_n = sin(_phiP);
 	_r0 = scale * _A / tan(_phiP);
 	_FE = falseEasting;
@@ -35,10 +35,10 @@ PointD Krovak::ll2xy(const Coordinates &c) const
 	double phi = deg2rad(c.lat());
 	double lambda = deg2rad(c.lon());
 	double eSinPhi = _e * sin(phi);
-	double U = 2.0 * (atan(_t0 * pow(tan(phi/2.0 + M_PI_4), _B)
-	  / pow((1.0 + eSinPhi) / (1.0 - eSinPhi), _e * _B/2.0)) - M_PI_4);
+	double U = 2.0 * (atan(_t0 * pow(tan(phi/2.0 + M_PI_4), B)
+	  / pow((1.0 + eSinPhi) / (1.0 - eSinPhi), _e * B/2.0)) - M_PI_4);
 	double cosU = cos(U);
-	double V = _B * (_lambda0 - lambda);
+	double V = B * (_lambda0 - lambda);
 	double T = asin(_cosAlphaC * sin(U) + _sinAlphaC * cosU * cos(V));
 	double D = asin(cosU * sin(V) / cos(T));
 	double theta = _n * D;
@@ -63,8 +63,8 @@ Coordinates Krovak::xy2ll(const PointD &p) const
 	double V = asin(cos(T) * sin(D) / cos(U));
 	double phi = U;
 	for (int i = 0; i < 3; i++)
-		phi = 2.0 * (atan(pow(_t0, -1.0/_B) * pow(tan(U/2.0 + M_PI_4), 1.0/_B)
+		phi = 2.0 * (atan(pow(_t0, -1.0/B) * pow(tan(U/2.0 + M_PI_4), 1.0/B)
 		  * pow((1.0 + _e * sin(phi))/(1.0 - _e * sin(phi)), _e/2.0)) - M_PI_4);
 
-	return Coordinates(rad2deg(_lambda0 - V/_B), rad2deg(phi));
+	return Coordinates(rad2deg(_lambda0 - V/B), rad2deg(phi));
 }
