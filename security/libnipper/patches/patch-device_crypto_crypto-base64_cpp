$OpenBSD: patch-device_crypto_crypto-base64_cpp,v 1.2 2019/04/23 18:09:00 cwen Exp $

Hunk #1: let it build on archs where char is unsigned by default (ppc, arm)
Hunk #2: let it build with base gcc

Index: device/crypto/crypto-base64.cpp
--- device/crypto/crypto-base64.cpp.orig
+++ device/crypto/crypto-base64.cpp
@@ -36,7 +36,7 @@
 
 // See RFC3548 for details of Base64 Encode / Decode standards
 
-static const char base64string[] = {62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51};
+static const signed char base64string[] = {62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51};
 
 
 // Base64 character check
@@ -110,9 +110,9 @@ const char *Device::base64Decode(const char *encodedSt
 		offset++;
 
 		// Convert 4 6 bit characters into 3 8 bit ones...
-		base64TempString.append(1, ((inter1 << 2) | (inter2 >> 4)));
-		base64TempString.append(1, (((inter2 << 4) & 240) | (inter3 >> 2)));
-		base64TempString.append(1, (((inter3 << 6) & 192)| inter4));
+		base64TempString.append(1, (char) ((inter1 << 2) | (inter2 >> 4)));
+		base64TempString.append(1, (char) (((inter2 << 4) & 240) | (inter3 >> 2)));
+		base64TempString.append(1, (char) (((inter3 << 6) & 192)| inter4));
 	}
 
 	return base64TempString.c_str();
