$OpenBSD: patch-src_sphinxstd_cpp,v 1.3 2018/04/10 22:04:52 sthen Exp $
Index: src/sphinxstd.cpp
--- src/sphinxstd.cpp.orig
+++ src/sphinxstd.cpp
@@ -630,7 +630,7 @@ void * operator new ( size_t iSize )
 {
 	void * pResult = ::malloc ( iSize );
 	if ( !pResult )
-		sphDieRestart ( "out of memory (unable to allocate "UINT64_FMT" bytes)", (uint64_t)iSize ); // FIXME! this may fail with malloc error too
+		sphDieRestart ( "out of memory (unable to allocate " UINT64_FMT " bytes)", (uint64_t)iSize ); // FIXME! this may fail with malloc error too
 	return pResult;
 }
 
@@ -639,7 +639,7 @@ void * operator new [] ( size_t iSize )
 {
 	void * pResult = ::malloc ( iSize );
 	if ( !pResult )
-		sphDieRestart ( "out of memory (unable to allocate "UINT64_FMT" bytes)", (uint64_t)iSize ); // FIXME! this may fail with malloc error too
+		sphDieRestart ( "out of memory (unable to allocate " UINT64_FMT " bytes)", (uint64_t)iSize ); // FIXME! this may fail with malloc error too
 	return pResult;
 }
 
@@ -825,13 +825,6 @@ CSphProcessSharedMutex::CSphProcessSharedMutex ( int i
 	if ( iRes )
 	{
 		m_sError.SetSprintf ( "pthread_mutexattr_init, errno=%d", iRes );
-		return;
-	}
-	iRes = pthread_mutexattr_setpshared ( &tAttr, PTHREAD_PROCESS_SHARED );
-	if ( iRes )
-	{
-		m_sError.SetSprintf ( "pthread_mutexattr_setpshared, errno = %d", iRes );
-		pthread_mutexattr_destroy ( &tAttr );
 		return;
 	}
 
