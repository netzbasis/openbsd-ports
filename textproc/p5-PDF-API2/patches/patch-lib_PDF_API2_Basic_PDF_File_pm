$OpenBSD: patch-lib_PDF_API2_Basic_PDF_File_pm,v 1.1 2016/03/05 11:04:22 sthen Exp $

Fixes to cross-reference stream handling from upstream git.
https://github.com/ssimms/pdfapi2/commits/master/lib/PDF/API2/Basic/PDF/File.pm

--- lib/PDF/API2/Basic/PDF/File.pm.orig	Sat Mar  5 10:45:30 2016
+++ lib/PDF/API2/Basic/PDF/File.pm	Sat Mar  5 10:45:18 2016
@@ -255,6 +255,7 @@ sub open {
         die "Malformed PDF file $filename";
     }
     my $xpos = $1;
+    $self->{' xref_position'} = $xpos;
 
     my $tdict = $self->readxrtr($xpos, $self);
     foreach my $key (keys %$tdict) {
@@ -455,8 +456,11 @@ sub readval {
     my ($result, $value);
 
     my $update = defined($opts{update}) ? $opts{update} : 1;
-    $str = update($fh, $str) if $update;
+    $str = update($fh, $str);
 
+    $str =~ s/^$ws_char+//;               # Ignore initial white space
+    $str =~ s/^\%[^\015\012]*$ws_char+//; # Ignore comments
+
     # Dictionary
     if ($str =~ m/^<</s) {
         $str = substr ($str, 2);
@@ -464,7 +468,10 @@ sub readval {
         $result = PDFDict();
 
         while ($str !~ m/^>>/) {
-            if ($str =~ s|^/($reg_char+)$ws_char?||) {
+            $str =~ s/^$ws_char+//;               # Ignore initial white space
+            $str =~ s/^\%[^\015\012]*$ws_char+//; # Ignore comments
+
+            if ($str =~ s|^/($reg_char+)||) {
                 my $key = PDF::API2::Basic::PDF::Name::name_to_string($1, $self);
                 ($value, $str) = $self->readval($str, %opts);
                 $result->{$key} = $value;
@@ -489,7 +496,13 @@ sub readval {
             my $length = $result->{'Length'}->val;
             $result->{' streamsrc'} = $fh;
             $result->{' streamloc'} = $fh->tell - length($str);
-            $result->{' streamloc'}-- if $fh->eof;
+
+            # The following line was added as part of the initial XRef Stream patch, but it breaks
+            # streams that are near the end of a file (starting the stream one byte early, resulting
+            # in corruption).
+            #
+            # $result->{' streamloc'}-- if $fh->eof;
+
             unless ($opts{'nostreams'}) {
                 if ($length > length($str)) {
                     $value = $str;
@@ -615,7 +628,7 @@ sub readval {
     elsif ($str =~ m/^</) {
         $str =~ s/^<//;
         $fh->read($str, 255, length($str)) while (0 > index($str, '>'));
-        ($value, $str) = ($str =~ /^(.*?)>(.*?)$/s);
+        ($value, $str) = ($str =~ /^(.*?)>(.*)/s);
         $result = PDF::API2::Basic::PDF::String->from_pdf('<' . $value . '>');
     } 
 
@@ -625,6 +638,9 @@ sub readval {
         $str = update($fh, $str) if $update;
         $result = PDFArray();
         while ($str !~ m/^\]/) {
+            $str =~ s/^$ws_char+//;               # Ignore initial white space
+            $str =~ s/^\%[^\015\012]*$ws_char+//; # Ignore comments
+
             ($value, $str) = $self->readval($str, %opts);
             $result->add_elements($value);
             $str = update($fh, $str) if $update;   # str might just be exhausted!
@@ -656,7 +672,7 @@ sub readval {
         die "Can't parse `$str' near " . ($fh->tell()) . " length " . length($str) . ".";
     }
 
-    $str =~ s/^$ws_char*//s;
+    $str =~ s/^$ws_char+//s;
     return ($result, $str);
 }
 
@@ -1012,7 +1028,7 @@ sub update {
         while ($str =~ m/^\%/) { # restructured by fredo/2003-03-23
             print STDERR 'fpos=' . tell($fh) . ' strlen=' . length($str) . "\n" if $readDebug;
             $fh->read($str, 314, length($str)) while ($str !~ m/$cr/ and not $fh->eof());
-            $str =~ s/^\%[^\015\012]+$ws_char*//so; # fixed for reportlab -- fredo
+            $str =~ s/^\%[^\015\012]*$ws_char*//so; # fixed for reportlab -- fredo
         }
     }
 
@@ -1069,6 +1085,7 @@ sub _unpack_xref_stream {
     return unpack('C', $data)       if $width == 1;
     return unpack('n', $data)       if $width == 2;
     return unpack('N', "\x00$data") if $width == 3;
+    return unpack('N', $data)       if $width == 4;
 
     die "Invalid column width: $width";
 }
@@ -1120,16 +1137,18 @@ sub readxrtr {
 
         ($tdict, $buf) = $self->readval($buf);
     }
-    elsif ($buf =~ m/^\d+\s+\d+\s+obj/i)
+    elsif ($buf =~ m/^(\d+)\s+(\d+)\s+obj/i)
     {
+        my ($xref_obj, $xref_gen) = ($1, $2);
+
         # XRef streams.
         ($tdict, $buf) = $self->readval($buf);
 
         unless ($tdict->{' stream'})
         {
-            die "Malformed XRefStm object in PDF file $self->{' fname'}";
+            die "Malformed XRefStm at $xref_obj $xref_gen obj in PDF file $self->{' fname'}";
         }
-        $tdict->read_stream();
+        $tdict->read_stream(1);
 
         my $stream = $tdict->{' stream'};
         my @widths = map { $_->val } @{$tdict->{W}->val};
@@ -1144,7 +1163,7 @@ sub readxrtr {
         }
         else
         {
-            @index = (0, $tdict->{Size}->val - 1);
+            @index = (0, $tdict->{Size}->val);
         }
 
         while (scalar @index) {
@@ -1164,7 +1183,9 @@ sub readxrtr {
                 }
     
                 $cols[0] = 1 unless defined $cols[0];
-                die 'Invalid XRefStm entry type: ', $cols[0] if $cols[0] > 2;
+                if ($cols[0] > 2) {
+                    die "Invalid XRefStm entry type ($cols[0]) at $xref_obj $xref_gen obj";
+                }
     
                 next if exists $xlist->{$xmin};
     
