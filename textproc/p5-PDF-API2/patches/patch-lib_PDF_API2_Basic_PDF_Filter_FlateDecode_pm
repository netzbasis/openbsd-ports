$OpenBSD: patch-lib_PDF_API2_Basic_PDF_Filter_FlateDecode_pm,v 1.1 2016/03/09 23:35:32 sthen Exp $

From 18f81bcd903f21a52f152efacd4ed5e4b6151154 Mon Sep 17 00:00:00 2001
From: Steve Simms <steve@deefs.net>
Date: Wed, 9 Mar 2016 09:35:36 -0500
Subject: [PATCH] Code style update.

From d3ef24a699a056d7f50c3c97aa05805e2a253587 Mon Sep 17 00:00:00 2001
From: Steve Simms <steve@deefs.net>
Date: Wed, 9 Mar 2016 10:07:17 -0500
Subject: [PATCH] Fix: Don't break if a large stream requires more than one
 call to depredict.

From 94db17671a13a34122aa2dcb89562c0132bf1f77 Mon Sep 17 00:00:00 2001
From: Steve Simms <steve@deefs.net>
Date: Wed, 9 Mar 2016 10:23:21 -0500
Subject: [PATCH] Die sooner if an invalid depredict algorithm is requested.

--- lib/PDF/API2/Basic/PDF/Filter/FlateDecode.pm.orig	Wed Feb 24 13:52:32 2016
+++ lib/PDF/API2/Basic/PDF/Filter/FlateDecode.pm	Wed Mar  9 23:02:34 2016
@@ -68,6 +68,10 @@ sub _depredict_png {
     my ($self, $stream) = @_;
     my $param  = $self->{'DecodeParms'};
 
+    my $prev = '';
+    $stream = $self->{'_depredict_next'} . $stream if defined $self->{'_depredict_next'};
+    $prev   = $self->{'_depredict_prev'}           if defined $self->{'_depredict_prev'};
+
     my $alpha   = $param->{Alpha}            ? $param->{Alpha}->val()            : 0;
     my $bpc     = $param->{BitsPerComponent} ? $param->{BitsPerComponent}->val() : 8;
     my $colors  = $param->{Colors}           ? $param->{Colors}->val()           : 1;
@@ -78,58 +82,67 @@ sub _depredict_png {
     my $bpp      = ceil($bpc * $comp / 8);
     my $scanline = 1 + ceil($bpp * $columns);
 
-    my $prev='';
-    my $clearstream='';
-    my $lastrow=($height||(length($stream)/$scanline))-1;
-    foreach my $n (0..$lastrow) {
+    my $clearstream = '';
+    my $lastrow = ($height || int(length($stream) / $scanline)) - 1;
+    foreach my $n (0 .. $lastrow) {
         # print STDERR "line $n:";
-        my $line=substr($stream,$n*$scanline,$scanline);
-        my $filter=vec($line,0,8);
-        my $clear='';
-        $line=substr($line,1);
-        # print STDERR " filter=$filter";
-        if($filter==0) {
-            $clear=$line;
-        } elsif($filter==1) {
-            foreach my $x (0..length($line)-1) {
-                vec($clear,$x,8)=(vec($line,$x,8)+vec($clear,$x-$bpp,8))%256;
+        my $line = substr($stream, $n * $scanline, $scanline);
+        my $filter = vec($line, 0, 8);
+        my $clear = '';
+        $line = substr($line, 1);
+        # print STDERR " filter=$filter ";
+        if ($filter == 0) {
+            $clear = $line;
+        }
+        elsif ($filter == 1) {
+            foreach my $x (0 .. length($line) - 1) {
+                vec($clear, $x, 8) = (vec($line, $x, 8) + vec($clear, $x - $bpp, 8)) % 256;
             }
-        } elsif($filter==2) {
-            foreach my $x (0..length($line)-1) {
-                vec($clear,$x,8)=(vec($line,$x,8)+vec($prev,$x,8))%256;
+        }
+        elsif ($filter == 2) {
+            foreach my $x (0 .. length($line) - 1) {
+                vec($clear, $x, 8) = (vec($line, $x, 8) + vec($prev, $x, 8)) % 256;
             }
-        } elsif($filter==3) {
-            foreach my $x (0..length($line)-1) {
-                vec($clear,$x,8)=(vec($line,$x,8)+floor((vec($clear,$x-$bpp,8)+vec($prev,$x,8))/2))%256;
+        }
+        elsif ($filter == 3) {
+            foreach my $x (0 .. length($line) - 1) {
+                vec($clear, $x, 8) = (vec($line, $x, 8) + floor((vec($clear, $x - $bpp, 8) + vec($prev, $x, 8)) / 2)) % 256;
             }
-        } elsif($filter==4) {
-            # die "paeth/png filter not supported.";
-            foreach my $x (0..length($line)-1) {
-                vec($clear,$x,8)=(vec($line,$x,8)+_paeth_predictor(vec($clear,$x-$bpp,8),vec($prev,$x,8),vec($prev,$x-$bpp,8)))%256;
+        }
+        elsif ($filter == 4) {
+            foreach my $x (0 .. length($line) - 1) {
+                vec($clear, $x, 8) = (vec($line, $x, 8) + _paeth_predictor(vec($clear, $x - $bpp, 8), vec($prev, $x, 8), vec($prev, $x - $bpp, 8))) % 256;
             }
         }
-        $prev=$clear;
-        foreach my $x (0..($columns*$comp)-1) {
-            vec($clearstream,($n*$columns*$comp)+$x,$bpc)=vec($clear,$x,$bpc);
-        #    print STDERR "".vec($clear,$x,$bpc).",";
+        else {
+            die "Unexpected depredictor algorithm $filter requested on line $n (valid options are 0-4)";
         }
+        $prev = $clear;
+        foreach my $x (0 .. ($columns * $comp) - 1) {
+            vec($clearstream, ($n * $columns * $comp) + $x, $bpc) = vec($clear, $x, $bpc);
+            # print STDERR "" . vec($clear, $x, $bpc) . ",";
+        }
         # print STDERR "\n";
     }
+    $self->{'_depredict_next'} = substr($stream, ($lastrow + 1) * $scanline);
+    $self->{'_depredict_prev'} = $prev;
 
     return $clearstream;
 }
 
 sub _paeth_predictor {
-    my ($a, $b, $c)=@_;
+    my ($a, $b, $c) = @_;
     my $p = $a + $b - $c;
     my $pa = abs($p - $a);
     my $pb = abs($p - $b);
     my $pc = abs($p - $c);
-    if(($pa <= $pb) && ($pa <= $pc)) {
+    if ($pa <= $pb && $pa <= $pc) {
         return $a;
-    } elsif($pb <= $pc) {
+    }
+    elsif ($pb <= $pc) {
         return $b;
-    } else {
+    }
+    else {
         return $c;
     }
 }
