$OpenBSD: patch-include_mapnik_svg_svg_transform_grammar_hpp,v 1.1 2015/07/01 08:45:19 jasper Exp $

From 76f111cc97a86cb029682f92b3d212f105f46aa6 Mon Sep 17 00:00:00 2001
From: Dane Springmeyer <dane@dbsgeo.com>
Date: Sat, 27 Jul 2013 01:57:24 -0400
Subject: [PATCH] support optionally compiling with -std=c++11 on OSX / clang / apple libc++ / boost 1.53 - refs #1683

--- include/mapnik/svg/svg_transform_grammar.hpp.orig	Tue Jun  4 03:35:27 2013
+++ include/mapnik/svg/svg_transform_grammar.hpp	Mon Jun 29 09:08:51 2015
@@ -50,7 +50,11 @@ namespace mapnik { namespace svg {
     template <typename TransformType>
     struct process_matrix
     {
+#ifdef BOOST_SPIRIT_USE_PHOENIX_V3
+        template <typename T0>
+#else
         template <typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
+#endif
         struct result
         {
             typedef void type;
@@ -70,7 +74,11 @@ namespace mapnik { namespace svg {
     template <typename TransformType>
     struct process_rotate
     {
+#ifdef BOOST_SPIRIT_USE_PHOENIX_V3
+        template <typename T0>
+#else
         template <typename T0, typename T1, typename T2>
+#endif
         struct result
         {
             typedef void type;
@@ -101,7 +109,11 @@ namespace mapnik { namespace svg {
     template <typename TransformType>
     struct process_translate
     {
+#ifdef BOOST_SPIRIT_USE_PHOENIX_V3
+        template <typename T0>
+#else
         template <typename T0, typename T1>
+#endif
         struct result
         {
             typedef void type;
@@ -123,7 +135,11 @@ namespace mapnik { namespace svg {
     template <typename TransformType>
     struct process_scale
     {
+#ifdef BOOST_SPIRIT_USE_PHOENIX_V3
+        template <typename T0>
+#else
         template <typename T0, typename T1>
+#endif
         struct result
         {
             typedef void type;
@@ -146,7 +162,11 @@ namespace mapnik { namespace svg {
     template <typename TransformType>
     struct process_skew
     {
+#ifdef BOOST_SPIRIT_USE_PHOENIX_V3
+        template <typename T0>
+#else
         template <typename T0, typename T1>
+#endif
         struct result
         {
             typedef void type;
