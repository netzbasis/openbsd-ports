$OpenBSD: patch-include_mapnik_json_feature_parser_hpp,v 1.1 2015/07/01 08:45:19 jasper Exp $

From 76f111cc97a86cb029682f92b3d212f105f46aa6 Mon Sep 17 00:00:00 2001
From: Dane Springmeyer <dane@dbsgeo.com>
Date: Sat, 27 Jul 2013 01:57:24 -0400
Subject: [PATCH] support optionally compiling with -std=c++11 on OSX / clang / apple libc++ / boost 1.53 - refs #1683

--- include/mapnik/json/feature_parser.hpp.orig	Mon Jun 29 09:08:51 2015
+++ include/mapnik/json/feature_parser.hpp	Mon Jun 29 09:08:51 2015
@@ -0,0 +1,57 @@
+/*****************************************************************************
+ *
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
+ * Copyright (C) 2012 Artem Pavlenko
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
+
+#ifndef MAPNIK_FEATURE_PARSER_HPP
+#define MAPNIK_FEATURE_PARSER_HPP
+
+// mapnik
+#include <mapnik/config.hpp>
+#include <mapnik/feature.hpp>
+#include <mapnik/noncopyable.hpp>
+#include <mapnik/unicode.hpp>
+
+// boost
+#include <boost/scoped_ptr.hpp>
+
+// stl
+#include <vector>
+
+namespace mapnik { namespace json {
+
+template <typename Iterator, typename FeatureType> struct feature_grammar;
+
+template <typename Iterator>
+class MAPNIK_DECL feature_parser : private mapnik::noncopyable
+{
+    typedef Iterator iterator_type;
+    typedef mapnik::feature_impl feature_type;
+public:
+    feature_parser(mapnik::transcoder const& tr);
+    ~feature_parser();
+    bool parse(iterator_type first, iterator_type last, mapnik::feature_impl & f);
+private:
+    boost::scoped_ptr<feature_grammar<iterator_type,feature_type> > grammar_;
+};
+
+}}
+
+#endif //MAPNIK_FEATURE_PARSER_HPP
