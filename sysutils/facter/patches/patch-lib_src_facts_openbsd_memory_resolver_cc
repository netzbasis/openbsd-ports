$OpenBSD: patch-lib_src_facts_openbsd_memory_resolver_cc,v 1.3 2016/05/31 14:09:55 jasper Exp $

- https://github.com/puppetlabs/facter/pull/1343
- https://github.com/puppetlabs/facter/pull/1345

--- lib/src/facts/openbsd/memory_resolver.cc.orig	Fri May 20 18:36:55 2016
+++ lib/src/facts/openbsd/memory_resolver.cc	Tue May 31 15:53:39 2016
@@ -1,5 +1,5 @@
 #include <internal/facts/openbsd/memory_resolver.hpp>
-#include <facter/execution/execution.hpp>
+#include <leatherman/execution/execution.hpp>
 #include <leatherman/logging/logging.hpp>
 #include <sys/types.h>
 #include <sys/param.h>
@@ -9,8 +9,7 @@
 #include <unistd.h>
 
 using namespace std;
-using namespace facter::execution;
-using namespace facter::util;
+using namespace leatherman::execution;
 
 namespace facter { namespace facts { namespace openbsd {
 
@@ -49,12 +48,16 @@ namespace facter { namespace facts { namespace openbsd
         uint64_t swap_used = 0;
         for (auto &&swap : swapdev) {
             if (swap.se_flags & SWF_ENABLE) {
-                result.swap_total += swap.se_nblks * DEV_BSIZE;
-                swap_used += swap.se_inuse * DEV_BSIZE;
+		    result.swap_total += swap.se_nblks / (1024 / DEV_BSIZE);
+		    swap_used += swap.se_inuse / (1024 / DEV_BSIZE);
             }
         }
 
         result.swap_free = result.swap_total - swap_used;
+
+	// Adjust for expected scale
+	result.swap_total *= 1024;
+	result.swap_free *= 1024;
 
         // 0 is for CTL_SWPENC_NAMES' "enable", see uvm_swap_encrypt.h
         int swap_encrypted_mib[] = { CTL_VM, VM_SWAPENCRYPT, 0 };
