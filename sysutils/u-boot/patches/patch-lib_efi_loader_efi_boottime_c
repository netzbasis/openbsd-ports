$OpenBSD: patch-lib_efi_loader_efi_boottime_c,v 1.3 2018/11/15 09:50:45 jsg Exp $

revert 3170db63c41a2eda6ee6573353bb4de8c7c1b9d5 
efi_loader: remove efi_exit_caches()

efiboot on armv7 isn't ready and will fail to boot otherwise.

Index: lib/efi_loader/efi_boottime.c
--- lib/efi_loader/efi_boottime.c.orig
+++ lib/efi_loader/efi_boottime.c
@@ -26,6 +26,14 @@ LIST_HEAD(efi_obj_list);
 /* List of all events */
 LIST_HEAD(efi_events);
 
+/*
+ * If we're running on nasty systems (32bit ARM booting into non-EFI Linux)
+ * we need to do trickery with caches. Since we don't want to break the EFI
+ * aware boot path, only apply hacks when loading exiting directly (breaking
+ * direct Linux EFI booting along the way - oh well).
+ */
+static bool efi_is_direct_boot = true;
+
 #ifdef CONFIG_ARM
 /*
  * The "gd" pointer lives in a register on ARM and AArch64 that we declare
@@ -1678,6 +1686,8 @@ static efi_status_t EFIAPI efi_start_image(efi_handle_
 
 	EFI_ENTRY("%p, %p, %p", image_handle, exit_data_size, exit_data);
 
+	efi_is_direct_boot = false;
+
 	/* call the image! */
 	if (setjmp(&image_obj->exit_jmp)) {
 		/*
@@ -1786,6 +1796,21 @@ static efi_status_t EFIAPI efi_unload_image(efi_handle
 }
 
 /**
+ * efi_exit_caches() - fix up caches for EFI payloads if necessary
+ */
+static void efi_exit_caches(void)
+{
+#if defined(CONFIG_ARM) && !defined(CONFIG_ARM64)
+	/*
+	 * Grub on 32bit ARM needs to have caches disabled before jumping into
+	 * a zImage, but does not know of all cache layers. Give it a hand.
+	 */
+	if (efi_is_direct_boot)
+		cleanup_before_linux();
+#endif
+}
+
+/**
  * efi_exit_boot_services() - stop all boot services
  * @image_handle: handle of the loaded image
  * @map_key:      key of the memory map
@@ -1837,6 +1862,9 @@ static efi_status_t EFIAPI efi_exit_boot_services(efi_
 	/* TODO: Should persist EFI variables here */
 
 	board_quiesce_devices();
+
+	/* Fix up caches for EFI payloads if necessary */
+	efi_exit_caches();
 
 	/* This stops all lingering devices */
 	bootm_disable_interrupts();
